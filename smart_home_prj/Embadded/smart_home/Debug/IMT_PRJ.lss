
IMT_PRJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000041c  00800060  00002c9a  00002d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080047c  0080047c  0000314a  2**0
                  ALLOC
  3 .stab         0000318c  00000000  00000000  0000314c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001777  00000000  00000000  000062d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a833  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c19b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_1>
       8:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_2>
       c:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 12 	call	0x2552	; 0x2552 <main>
      8a:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInitUART>:
#include "UART_Config.h"

static void   (*UART_RXCallBackOVFunc)(void )= NULL;

void UART_voidInitUART(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

    /* make local var to collect bits values before assign it to UCSRC Register */
    u8 Local_u8RegValue=0;
     b50:	19 82       	std	Y+1, r1	; 0x01

    /*set bit 7 to select writing in UCSRC not UBRRH */
    SET_BIT(Local_u8RegValue,UART_UCSRC_URSEL);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01

    /* Select Asyncronous */
    CLR_BIT(Local_u8RegValue,UART_UCSRC_UMSEL);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	89 83       	std	Y+1, r24	; 0x01

    /*Select Parity Disable*/
    CLR_BIT(Local_u8RegValue,UART_UCSRC_UPM1);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7d       	andi	r24, 0xDF	; 223
     b62:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_u8RegValue,UART_UCSRC_UPM0);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	8f 7e       	andi	r24, 0xEF	; 239
     b68:	89 83       	std	Y+1, r24	; 0x01

    /* select one bit for stop */
    CLR_BIT(Local_u8RegValue,UART_UCSRC_USBS);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	89 83       	std	Y+1, r24	; 0x01

    /*Select Char Size * bit*/
    CLR_BIT(Local_u8RegValue,UART_UCSRB_UCSZ2);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	8b 7f       	andi	r24, 0xFB	; 251
     b74:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8RegValue,UART_UCSRC_UCSZ0);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	82 60       	ori	r24, 0x02	; 2
     b7a:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8RegValue,UART_UCSRC_UCSZ1);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	84 60       	ori	r24, 0x04	; 4
     b80:	89 83       	std	Y+1, r24	; 0x01


   // Assign Value To Register
    UART_UCSRC=Local_u8RegValue;
     b82:	e0 e4       	ldi	r30, 0x40	; 64
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	80 83       	st	Z, r24

    /*Select Baud Rate 9600 bps*/
    UART_UBRRL=51;   // From table in data sheet
     b8a:	e9 e2       	ldi	r30, 0x29	; 41
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	83 e3       	ldi	r24, 0x33	; 51
     b90:	80 83       	st	Z, r24

	 /*Receive interrupt enable config*/
#if MUART_RX_INTERRUPT_ENABLE==MUART_DISABLED
    CLR_BIT(UART_UCSRB,UART_UCSRB_RXCIE);
#else
    SET_BIT(UART_UCSRB,UART_UCSRB_RXCIE);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24
#endif

    /*Enable Rx and Tx*/
    SET_BIT(UART_UCSRB,UART_UCSRB_RXEN);
     ba0:	aa e2       	ldi	r26, 0x2A	; 42
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ea e2       	ldi	r30, 0x2A	; 42
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 61       	ori	r24, 0x10	; 16
     bac:	8c 93       	st	X, r24
    SET_BIT(UART_UCSRB,UART_UCSRB_TXEN);
     bae:	aa e2       	ldi	r26, 0x2A	; 42
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ea e2       	ldi	r30, 0x2A	; 42
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	8c 93       	st	X, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	//UART_UDR=Copy_u8Data;
    /*wait till Data Register Empty flag is set*/
    while (GET_BIT(UART_UCSRA,UART_UCSRA_UDRE)==0);
     bd0:	eb e2       	ldi	r30, 0x2B	; 43
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 95       	swap	r24
     bd8:	86 95       	lsr	r24
     bda:	87 70       	andi	r24, 0x07	; 7
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	a1 f3       	breq	.-24     	; 0xbd0 <UART_voidSendData+0xc>
        UART_UDR= Copy_u8Data;
     be8:	ec e2       	ldi	r30, 0x2C	; 44
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	80 83       	st	Z, r24
}
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <UART_U8ReceiveData>:

u8 UART_U8ReceiveData(void)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
    /* Waiting till receiving flag is set*/
    while (GET_BIT(UART_UCSRA,UART_UCSRA_RXC)==0);
     c00:	eb e2       	ldi	r30, 0x2B	; 43
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 23       	and	r24, r24
     c08:	dc f7       	brge	.-10     	; 0xc00 <UART_U8ReceiveData+0x8>
        return UART_UDR;
     c0a:	ec e2       	ldi	r30, 0x2C	; 44
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z

}
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <UART_VoidSendString>:
void UART_VoidSendString(char *str)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <UART_VoidSendString+0x6>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <UART_VoidSendString+0x8>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
	u16 i = 0;
     c26:	1a 82       	std	Y+2, r1	; 0x02
     c28:	19 82       	std	Y+1, r1	; 0x01
     c2a:	0f c0       	rjmp	.+30     	; 0xc4a <UART_VoidSendString+0x34>

	while(str[i] != '\0')
	{
		UART_voidSendData(str[i]);
     c2c:	2b 81       	ldd	r18, Y+3	; 0x03
     c2e:	3c 81       	ldd	r19, Y+4	; 0x04
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	f9 01       	movw	r30, r18
     c36:	e8 0f       	add	r30, r24
     c38:	f9 1f       	adc	r31, r25
     c3a:	80 81       	ld	r24, Z
     c3c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <UART_voidSendData>
		i++;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
}
void UART_VoidSendString(char *str)
{
	u16 i = 0;

	while(str[i] != '\0')
     c4a:	2b 81       	ldd	r18, Y+3	; 0x03
     c4c:	3c 81       	ldd	r19, Y+4	; 0x04
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	f9 01       	movw	r30, r18
     c54:	e8 0f       	add	r30, r24
     c56:	f9 1f       	adc	r31, r25
     c58:	80 81       	ld	r24, Z
     c5a:	88 23       	and	r24, r24
     c5c:	39 f7       	brne	.-50     	; 0xc2c <UART_VoidSendString+0x16>
	{
		UART_voidSendData(str[i]);
		i++;
	}
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <UART_u8SetRXCallBack>:



void UART_u8SetRXCallBack(void(*Copy_CallBackFunc)(void))
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <UART_u8SetRXCallBack+0x6>
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_CallBackFunc!=NULL)
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	31 f0       	breq	.+12     	; 0xc8e <UART_u8SetRXCallBack+0x22>
    {
    	UART_RXCallBackOVFunc=Copy_CallBackFunc;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	90 93 7d 04 	sts	0x047D, r25
     c8a:	80 93 7c 04 	sts	0x047C, r24
    }
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <__vector_13>:


void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
    if(UART_RXCallBackOVFunc!=NULL)
     cc2:	80 91 7c 04 	lds	r24, 0x047C
     cc6:	90 91 7d 04 	lds	r25, 0x047D
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	29 f0       	breq	.+10     	; 0xcd8 <__vector_13+0x40>
    {
    	UART_RXCallBackOVFunc();
     cce:	e0 91 7c 04 	lds	r30, 0x047C
     cd2:	f0 91 7d 04 	lds	r31, 0x047D
     cd6:	09 95       	icall
    }

}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <PORT_VoidInit>:
#include "PORT_Config.h"
#include "PORT_Interface.h"
#include "PORT_private.h"

void PORT_VoidInit()
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
DDRA_REG=PORTA_DIR;
     d06:	ea e3       	ldi	r30, 0x3A	; 58
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	80 83       	st	Z, r24
DDRB_REG=PORTB_DIR;
     d0e:	e7 e3       	ldi	r30, 0x37	; 55
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	80 83       	st	Z, r24
DDRC_REG=PORTC_DIR;
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	80 83       	st	Z, r24
DDRD_REG=PORTD_DIR;
     d1e:	e1 e3       	ldi	r30, 0x31	; 49
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	8a ef       	ldi	r24, 0xFA	; 250
     d24:	80 83       	st	Z, r24

PORTA_REG_INITIAL=PORTA_INITIAL_VALUE;
     d26:	eb e3       	ldi	r30, 0x3B	; 59
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	80 83       	st	Z, r24
PORTB_REG_INITIAL=PORTB_INITIAL_VALUE;
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1
PORTC_REG_INITIAL=PORTC_INITIAL_VALUE;
     d34:	e5 e3       	ldi	r30, 0x35	; 53
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	10 82       	st	Z, r1
PORTD_REG_INITIAL=PORTD_INITIAL_VALUE;
     d3a:	e2 e3       	ldi	r30, 0x32	; 50
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	80 83       	st	Z, r24

}
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <GIE_VoidEnable>:
#include "GIE_Interface.h"
#include "GIE_Configration.h"


void GIE_VoidEnable(void)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG,SREG_I_PIN);
     d50:	af e5       	ldi	r26, 0x5F	; 95
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ef e5       	ldi	r30, 0x5F	; 95
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	8c 93       	st	X, r24
}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG_REG,SREG_I_PIN);
     d6c:	af e5       	ldi	r26, 0x5F	; 95
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ef e5       	ldi	r30, 0x5F	; 95
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8f 77       	andi	r24, 0x7F	; 127
     d78:	8c 93       	st	X, r24
}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <EXTI_VoidINTInit>:
 * Description : Initialize  INT using pre processing directive [ Mood , Status]
 * Arguments   : u8 INT_Number      [INT0, INT1, INT2]
 * return      : void
 */
void EXTI_VoidINTInit(u8 Copy_u8INT_Number)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <EXTI_VoidINTInit+0x6>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8INT_Number)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	3b 83       	std	Y+3, r19	; 0x03
     d96:	2a 83       	std	Y+2, r18	; 0x02
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	9b 81       	ldd	r25, Y+3	; 0x03
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	f9 f0       	breq	.+62     	; 0xde0 <EXTI_VoidINTInit+0x60>
     da2:	2a 81       	ldd	r18, Y+2	; 0x02
     da4:	3b 81       	ldd	r19, Y+3	; 0x03
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	81 f1       	breq	.+96     	; 0xe0c <EXTI_VoidINTInit+0x8c>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	d1 f5       	brne	.+116    	; 0xe28 <EXTI_VoidINTInit+0xa8>
                SET_BIT(MCUCR_REG,MCUCR_ISC00);
                CLR_BIT(MCUCR_REG,MCUCR_ISC01);
            }
            else if(INT0_MOOD==FAILING_EDGE_MOOD)
            {
                CLR_BIT(MCUCR_REG,MCUCR_ISC00);
     db4:	a5 e5       	ldi	r26, 0x55	; 85
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e5 e5       	ldi	r30, 0x55	; 85
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8e 7f       	andi	r24, 0xFE	; 254
     dc0:	8c 93       	st	X, r24
                SET_BIT(MCUCR_REG,MCUCR_ISC01);
     dc2:	a5 e5       	ldi	r26, 0x55	; 85
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e5 e5       	ldi	r30, 0x55	; 85
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	8c 93       	st	X, r24
            }


            if(INT0_STATUS==Enable)
            {
                SET_BIT(GICR_REG,GICR_INT0);
     dd0:	ab e5       	ldi	r26, 0x5B	; 91
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	eb e5       	ldi	r30, 0x5B	; 91
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	8c 93       	st	X, r24
     dde:	24 c0       	rjmp	.+72     	; 0xe28 <EXTI_VoidINTInit+0xa8>
            }
        break;
        case INT1:
            if(INT1_MOOD==LOW_MOOD)
            {
                CLR_BIT(MCUCR_REG,MCUCR_ISC10);
     de0:	a5 e5       	ldi	r26, 0x55	; 85
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e5 e5       	ldi	r30, 0x55	; 85
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	8c 93       	st	X, r24
                CLR_BIT(MCUCR_REG,MCUCR_ISC11);
     dee:	a5 e5       	ldi	r26, 0x55	; 85
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e5 e5       	ldi	r30, 0x55	; 85
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	87 7f       	andi	r24, 0xF7	; 247
     dfa:	8c 93       	st	X, r24
                SET_BIT(MCUCR_REG,MCUCR_ISC11);
            }

            if(INT1_STATUS==Enable)
            {
                SET_BIT(GICR_REG,GICR_INT1);
     dfc:	ab e5       	ldi	r26, 0x5B	; 91
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	eb e5       	ldi	r30, 0x5B	; 91
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 68       	ori	r24, 0x80	; 128
     e08:	8c 93       	st	X, r24
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <EXTI_VoidINTInit+0xa8>
                SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
            }

           if(INT2_MOOD==FAILING_EDGE_MOOD)
            {
                CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
     e0c:	a4 e5       	ldi	r26, 0x54	; 84
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e4 e5       	ldi	r30, 0x54	; 84
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8f 7b       	andi	r24, 0xBF	; 191
     e18:	8c 93       	st	X, r24
            }


          if(INT2_STATUS==Enable)
          {
              SET_BIT(GICR_REG,GICR_INT2);
     e1a:	ab e5       	ldi	r26, 0x5B	; 91
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e5       	ldi	r30, 0x5B	; 91
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 62       	ori	r24, 0x20	; 32
     e26:	8c 93       	st	X, r24
              CLR_BIT(GICR_REG,GICR_INT2);
          }

            break;
    }
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <EXTI_VoidINTEnable>:
 * Description : Enable  INT at Run time
 * Arguments   : u8 Copy_u8INT_Number      [INT0, INT1, INT2]
 * return      : void
 */
void EXTI_VoidINTEnable(u8 Copy_u8INT_Number)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <EXTI_VoidINTEnable+0x6>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8INT_Number)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3b 83       	std	Y+3, r19	; 0x03
     e4a:	2a 83       	std	Y+2, r18	; 0x02
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	89 f0       	breq	.+34     	; 0xe78 <EXTI_VoidINTEnable+0x44>
     e56:	2a 81       	ldd	r18, Y+2	; 0x02
     e58:	3b 81       	ldd	r19, Y+3	; 0x03
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	a1 f0       	breq	.+40     	; 0xe88 <EXTI_VoidINTEnable+0x54>
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	b9 f4       	brne	.+46     	; 0xe96 <EXTI_VoidINTEnable+0x62>
    {
        case INT0:
            SET_BIT(GICR_REG,GICR_INT0);
     e68:	ab e5       	ldi	r26, 0x5B	; 91
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e5       	ldi	r30, 0x5B	; 91
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 64       	ori	r24, 0x40	; 64
     e74:	8c 93       	st	X, r24
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <EXTI_VoidINTEnable+0x62>
            break;
        case INT1:
            SET_BIT(GICR_REG,GICR_INT1);
     e78:	ab e5       	ldi	r26, 0x5B	; 91
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	eb e5       	ldi	r30, 0x5B	; 91
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 68       	ori	r24, 0x80	; 128
     e84:	8c 93       	st	X, r24
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <EXTI_VoidINTEnable+0x62>
            break;
        case INT2:
            SET_BIT(GICR_REG,GICR_INT2);
     e88:	ab e5       	ldi	r26, 0x5B	; 91
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e5       	ldi	r30, 0x5B	; 91
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 62       	ori	r24, 0x20	; 32
     e94:	8c 93       	st	X, r24
            break;
    }
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <EXTI_VoidINTDisable>:
 * Description : Disable  INT at Run time
 * Arguments   : u8 Copy_u8INT_Number      [INT0, INT1, INT2]
 * return      : void
 */
void EXTI_VoidINTDisable(u8 Copy_u8INT_Number)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <EXTI_VoidINTDisable+0x6>
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8INT_Number)
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3b 83       	std	Y+3, r19	; 0x03
     eb8:	2a 83       	std	Y+2, r18	; 0x02
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	9b 81       	ldd	r25, Y+3	; 0x03
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	91 05       	cpc	r25, r1
     ec2:	89 f0       	breq	.+34     	; 0xee6 <EXTI_VoidINTDisable+0x44>
     ec4:	2a 81       	ldd	r18, Y+2	; 0x02
     ec6:	3b 81       	ldd	r19, Y+3	; 0x03
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	a1 f0       	breq	.+40     	; 0xef6 <EXTI_VoidINTDisable+0x54>
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	b9 f4       	brne	.+46     	; 0xf04 <EXTI_VoidINTDisable+0x62>
    {
        case INT0:
            CLR_BIT(GICR_REG,GICR_INT0);
     ed6:	ab e5       	ldi	r26, 0x5B	; 91
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	eb e5       	ldi	r30, 0x5B	; 91
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8f 7b       	andi	r24, 0xBF	; 191
     ee2:	8c 93       	st	X, r24
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <EXTI_VoidINTDisable+0x62>
            break;
        case INT1:
            CLR_BIT(GICR_REG,GICR_INT1);
     ee6:	ab e5       	ldi	r26, 0x5B	; 91
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	eb e5       	ldi	r30, 0x5B	; 91
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 77       	andi	r24, 0x7F	; 127
     ef2:	8c 93       	st	X, r24
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <EXTI_VoidINTDisable+0x62>
            break;
        case INT2:
            CLR_BIT(GICR_REG,GICR_INT2);
     ef6:	ab e5       	ldi	r26, 0x5B	; 91
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	eb e5       	ldi	r30, 0x5B	; 91
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 7d       	andi	r24, 0xDF	; 223
     f02:	8c 93       	st	X, r24
            break;
    }
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <EXTI_VoidINTChangeMood>:
                        iF choose INT0,INT1 ==> RAISING_EDGE_MOOD  FAILING_EDGE_MOOD  LOW_MOOD  ON_CHANGE_MOOD
                        iF choose INT0,INT2 ==> RAISING_EDGE_MOOD  FAILING_EDGE_MOOD
 * return      : void
 */
void EXTI_VoidINTChangeMood(u8 Copy_u8INT_Number,u8 Copy_u8NewMood)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <EXTI_VoidINTChangeMood+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <EXTI_VoidINTChangeMood+0x8>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8INT_Number)
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	3c 83       	std	Y+4, r19	; 0x04
     f28:	2b 83       	std	Y+3, r18	; 0x03
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <EXTI_VoidINTChangeMood+0x26>
     f34:	54 c0       	rjmp	.+168    	; 0xfde <EXTI_VoidINTChangeMood+0xce>
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	3c 81       	ldd	r19, Y+4	; 0x04
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <EXTI_VoidINTChangeMood+0x32>
     f40:	96 c0       	rjmp	.+300    	; 0x106e <EXTI_VoidINTChangeMood+0x15e>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	09 f0       	breq	.+2      	; 0xf4c <EXTI_VoidINTChangeMood+0x3c>
     f4a:	a6 c0       	rjmp	.+332    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
    {
        case INT0:
            if (Copy_u8NewMood==LOW_MOOD)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	79 f4       	brne	.+30     	; 0xf70 <EXTI_VoidINTChangeMood+0x60>
            {
                CLR_BIT(MCUCR_REG,MCUCR_ISC00);
     f52:	a5 e5       	ldi	r26, 0x55	; 85
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e5       	ldi	r30, 0x55	; 85
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
                CLR_BIT(MCUCR_REG,MCUCR_ISC01);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8d 7f       	andi	r24, 0xFD	; 253
     f6c:	8c 93       	st	X, r24
     f6e:	94 c0       	rjmp	.+296    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==ON_CHANGE_MOOD)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	79 f4       	brne	.+30     	; 0xf94 <EXTI_VoidINTChangeMood+0x84>
            {
                SET_BIT(MCUCR_REG,MCUCR_ISC00);
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	8c 93       	st	X, r24
                CLR_BIT(MCUCR_REG,MCUCR_ISC01);
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 7f       	andi	r24, 0xFD	; 253
     f90:	8c 93       	st	X, r24
     f92:	82 c0       	rjmp	.+260    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==FAILING_EDGE_MOOD)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	79 f4       	brne	.+30     	; 0xfb8 <EXTI_VoidINTChangeMood+0xa8>
            {
                CLR_BIT(MCUCR_REG,MCUCR_ISC00);
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	8c 93       	st	X, r24
                SET_BIT(MCUCR_REG,MCUCR_ISC01);
     fa8:	a5 e5       	ldi	r26, 0x55	; 85
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e5       	ldi	r30, 0x55	; 85
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	82 60       	ori	r24, 0x02	; 2
     fb4:	8c 93       	st	X, r24
     fb6:	70 c0       	rjmp	.+224    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==RAISING_EDGE_MOOD)
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <EXTI_VoidINTChangeMood+0xb0>
     fbe:	6c c0       	rjmp	.+216    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            {
                SET_BIT(MCUCR_REG,MCUCR_ISC00);
     fc0:	a5 e5       	ldi	r26, 0x55	; 85
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e5       	ldi	r30, 0x55	; 85
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	8c 93       	st	X, r24
                SET_BIT(MCUCR_REG,MCUCR_ISC01);
     fce:	a5 e5       	ldi	r26, 0x55	; 85
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e5       	ldi	r30, 0x55	; 85
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	8c 93       	st	X, r24
     fdc:	5d c0       	rjmp	.+186    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            break;
        case INT1:
            if (Copy_u8NewMood==LOW_MOOD)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	79 f4       	brne	.+30     	; 0x1002 <EXTI_VoidINTChangeMood+0xf2>
            {
                CLR_BIT(MCUCR_REG,MCUCR_ISC10);
     fe4:	a5 e5       	ldi	r26, 0x55	; 85
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e5       	ldi	r30, 0x55	; 85
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
                CLR_BIT(MCUCR_REG,MCUCR_ISC11);
     ff2:	a5 e5       	ldi	r26, 0x55	; 85
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e5       	ldi	r30, 0x55	; 85
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	87 7f       	andi	r24, 0xF7	; 247
     ffe:	8c 93       	st	X, r24
    1000:	4b c0       	rjmp	.+150    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==ON_CHANGE_MOOD)
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	79 f4       	brne	.+30     	; 0x1026 <EXTI_VoidINTChangeMood+0x116>
            {
                SET_BIT(MCUCR_REG,MCUCR_ISC10);
    1008:	a5 e5       	ldi	r26, 0x55	; 85
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e5       	ldi	r30, 0x55	; 85
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	8c 93       	st	X, r24
                CLR_BIT(MCUCR_REG,MCUCR_ISC11);
    1016:	a5 e5       	ldi	r26, 0x55	; 85
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e5       	ldi	r30, 0x55	; 85
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	87 7f       	andi	r24, 0xF7	; 247
    1022:	8c 93       	st	X, r24
    1024:	39 c0       	rjmp	.+114    	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==FAILING_EDGE_MOOD)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	79 f4       	brne	.+30     	; 0x104a <EXTI_VoidINTChangeMood+0x13a>
            {
                CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    102c:	a5 e5       	ldi	r26, 0x55	; 85
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e5 e5       	ldi	r30, 0x55	; 85
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8b 7f       	andi	r24, 0xFB	; 251
    1038:	8c 93       	st	X, r24
                SET_BIT(MCUCR_REG,MCUCR_ISC11);
    103a:	a5 e5       	ldi	r26, 0x55	; 85
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
    1048:	27 c0       	rjmp	.+78     	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==RAISING_EDGE_MOOD)
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	21 f5       	brne	.+72     	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            {
                SET_BIT(MCUCR_REG,MCUCR_ISC10);
    1050:	a5 e5       	ldi	r26, 0x55	; 85
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e5 e5       	ldi	r30, 0x55	; 85
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	84 60       	ori	r24, 0x04	; 4
    105c:	8c 93       	st	X, r24
                SET_BIT(MCUCR_REG,MCUCR_ISC11);
    105e:	a5 e5       	ldi	r26, 0x55	; 85
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e5       	ldi	r30, 0x55	; 85
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	8c 93       	st	X, r24
    106c:	15 c0       	rjmp	.+42     	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            break;
        case INT2:
            if (Copy_u8NewMood==RAISING_EDGE_MOOD)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	41 f4       	brne	.+16     	; 0x1084 <EXTI_VoidINTChangeMood+0x174>
            {
                SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1074:	a4 e5       	ldi	r26, 0x54	; 84
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e4 e5       	ldi	r30, 0x54	; 84
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	8c 93       	st	X, r24
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            }
            else if (Copy_u8NewMood==FAILING_EDGE_MOOD)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	39 f4       	brne	.+14     	; 0x1098 <EXTI_VoidINTChangeMood+0x188>
            {
                CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    108a:	a4 e5       	ldi	r26, 0x54	; 84
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e5       	ldi	r30, 0x54	; 84
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 7b       	andi	r24, 0xBF	; 191
    1096:	8c 93       	st	X, r24
            }
            break;
    }
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <EXTI_VoidINTSetCallBackFunc>:
 * Arguments   : u8 Copy_u8INT_Number                [INT0, INT1, INT2]
               : void(* Copy_CallBackFunc)(void)     pointer point To Call Back Func
 * return      : void
 */
void EXTI_VoidINTSetCallBackFunc(u8 Copy_u8INT_Number,void(* Copy_CallBackFunc)(void))
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <EXTI_VoidINTSetCallBackFunc+0x6>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	7b 83       	std	Y+3, r23	; 0x03
    10b6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_CallBackFunc!=NULL)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	61 f0       	breq	.+24     	; 0x10d8 <EXTI_VoidINTSetCallBackFunc+0x32>
    {
        EXTI_CallBackFunc[Copy_u8INT_Number]=Copy_CallBackFunc;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 58       	subi	r30, 0x82	; 130
    10ce:	fb 4f       	sbci	r31, 0xFB	; 251
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    }

}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <__vector_1>:


void __vector_1(void)  __attribute__((signal));     ///ISR FOR INT 0
void __vector_1(void)
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_CallBackFunc[0]!=NULL)
    110e:	80 91 7e 04 	lds	r24, 0x047E
    1112:	90 91 7f 04 	lds	r25, 0x047F
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	29 f0       	breq	.+10     	; 0x1124 <__vector_1+0x40>
    {
        EXTI_CallBackFunc[0]();
    111a:	e0 91 7e 04 	lds	r30, 0x047E
    111e:	f0 91 7f 04 	lds	r31, 0x047F
    1122:	09 95       	icall
    }
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	7f 91       	pop	r23
    1136:	6f 91       	pop	r22
    1138:	5f 91       	pop	r21
    113a:	4f 91       	pop	r20
    113c:	3f 91       	pop	r19
    113e:	2f 91       	pop	r18
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <__vector_2>:


void __vector_2(void)  __attribute__((signal));     ///ISR FOR INT 1
void __vector_2(void)
{
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_CallBackFunc[1]!=NULL)
    1174:	80 91 80 04 	lds	r24, 0x0480
    1178:	90 91 81 04 	lds	r25, 0x0481
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	29 f0       	breq	.+10     	; 0x118a <__vector_2+0x40>
    {
        EXTI_CallBackFunc[1]();
    1180:	e0 91 80 04 	lds	r30, 0x0480
    1184:	f0 91 81 04 	lds	r31, 0x0481
    1188:	09 95       	icall
    }
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_3>:

void __vector_3(void)  __attribute__((signal));     ///ISR FOR INT 2
void __vector_3(void)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_CallBackFunc[2]!=NULL)
    11da:	80 91 82 04 	lds	r24, 0x0482
    11de:	90 91 83 04 	lds	r25, 0x0483
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__vector_3+0x40>
    {
        EXTI_CallBackFunc[2]();
    11e6:	e0 91 82 04 	lds	r30, 0x0482
    11ea:	f0 91 83 04 	lds	r31, 0x0483
    11ee:	09 95       	icall
    }
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <DIO_VoidSetPinDirection>:
#include "../../04_LIB/BIT_MATH.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

void DIO_VoidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Direction)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	27 97       	sbiw	r28, 0x07	; 7
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	6a 83       	std	Y+2, r22	; 0x02
    122e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Direction==DIO_INPUT_PIN)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 23       	and	r24, r24
    1234:	09 f0       	breq	.+2      	; 0x1238 <DIO_VoidSetPinDirection+0x22>
    1236:	54 c0       	rjmp	.+168    	; 0x12e0 <DIO_VoidSetPinDirection+0xca>
	{
		switch(Copy_U8Port)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3f 83       	std	Y+7, r19	; 0x07
    1240:	2e 83       	std	Y+6, r18	; 0x06
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	9f 81       	ldd	r25, Y+7	; 0x07
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	91 05       	cpc	r25, r1
    124a:	01 f1       	breq	.+64     	; 0x128c <DIO_VoidSetPinDirection+0x76>
    124c:	2e 81       	ldd	r18, Y+6	; 0x06
    124e:	3f 81       	ldd	r19, Y+7	; 0x07
    1250:	23 30       	cpi	r18, 0x03	; 3
    1252:	31 05       	cpc	r19, r1
    1254:	81 f1       	breq	.+96     	; 0x12b6 <DIO_VoidSetPinDirection+0xa0>
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	9f 81       	ldd	r25, Y+7	; 0x07
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	09 f0       	breq	.+2      	; 0x1262 <DIO_VoidSetPinDirection+0x4c>
    1260:	b1 c0       	rjmp	.+354    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
		{
			case DIO_PORTB: CLR_BIT(DDRB_REG,Copy_U8Pin); break ;
    1262:	a7 e3       	ldi	r26, 0x37	; 55
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_VoidSetPinDirection+0x6a>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_VoidSetPinDirection+0x66>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	9c c0       	rjmp	.+312    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTC: CLR_BIT(DDRC_REG,Copy_U8Pin); break ;
    128c:	a4 e3       	ldi	r26, 0x34	; 52
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_VoidSetPinDirection+0x94>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_VoidSetPinDirection+0x90>
    12ae:	80 95       	com	r24
    12b0:	84 23       	and	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	87 c0       	rjmp	.+270    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTD: CLR_BIT(DDRD_REG,Copy_U8Pin); break ;
    12b6:	a1 e3       	ldi	r26, 0x31	; 49
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_VoidSetPinDirection+0xbe>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_VoidSetPinDirection+0xba>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	72 c0       	rjmp	.+228    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
		}
		
	}
	else if(Copy_U8Direction==DIO_OUTPUT_PIN)
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <DIO_VoidSetPinDirection+0xd2>
    12e6:	6e c0       	rjmp	.+220    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
	{
		switch(Copy_U8Port)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3d 83       	std	Y+5, r19	; 0x05
    12f0:	2c 83       	std	Y+4, r18	; 0x04
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	91 05       	cpc	r25, r1
    12fa:	49 f1       	breq	.+82     	; 0x134e <DIO_VoidSetPinDirection+0x138>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	2c f4       	brge	.+10     	; 0x1310 <DIO_VoidSetPinDirection+0xfa>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	61 f0       	breq	.+24     	; 0x1326 <DIO_VoidSetPinDirection+0x110>
    130e:	5a c0       	rjmp	.+180    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	71 f1       	breq	.+92     	; 0x1376 <DIO_VoidSetPinDirection+0x160>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	e9 f1       	breq	.+122    	; 0x139e <DIO_VoidSetPinDirection+0x188>
    1324:	4f c0       	rjmp	.+158    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
		{
			case DIO_PORTA: SET_BIT(DDRA_REG,Copy_U8Pin); break ;
    1326:	aa e3       	ldi	r26, 0x3A	; 58
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	ea e3       	ldi	r30, 0x3A	; 58
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_VoidSetPinDirection+0x12e>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_VoidSetPinDirection+0x12a>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	3b c0       	rjmp	.+118    	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTB: SET_BIT(DDRB_REG,Copy_U8Pin); break ;
    134e:	a7 e3       	ldi	r26, 0x37	; 55
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e7 e3       	ldi	r30, 0x37	; 55
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_VoidSetPinDirection+0x156>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_VoidSetPinDirection+0x152>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	27 c0       	rjmp	.+78     	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTC: SET_BIT(DDRC_REG,Copy_U8Pin); break ;
    1376:	a4 e3       	ldi	r26, 0x34	; 52
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e4 e3       	ldi	r30, 0x34	; 52
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_VoidSetPinDirection+0x17e>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_VoidSetPinDirection+0x17a>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	13 c0       	rjmp	.+38     	; 0x13c4 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTD: SET_BIT(DDRD_REG,Copy_U8Pin); break ;
    139e:	a1 e3       	ldi	r26, 0x31	; 49
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e1 e3       	ldi	r30, 0x31	; 49
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_VoidSetPinDirection+0x1a6>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_VoidSetPinDirection+0x1a2>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
		}
		
	}
		
}
    13c4:	27 96       	adiw	r28, 0x07	; 7
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	27 97       	sbiw	r28, 0x07	; 7
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	6a 83       	std	Y+2, r22	; 0x02
    13ee:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_U8Value==DIO_HIGH)
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <DIO_VoidSetPinValue+0x22>
    13f6:	6f c0       	rjmp	.+222    	; 0x14d6 <DIO_VoidSetPinValue+0x100>
    {
        switch (Copy_U8Port)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3f 83       	std	Y+7, r19	; 0x07
    1400:	2e 83       	std	Y+6, r18	; 0x06
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	9f 81       	ldd	r25, Y+7	; 0x07
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	49 f1       	breq	.+82     	; 0x145e <DIO_VoidSetPinValue+0x88>
    140c:	2e 81       	ldd	r18, Y+6	; 0x06
    140e:	3f 81       	ldd	r19, Y+7	; 0x07
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <DIO_VoidSetPinValue+0x4a>
    1416:	8e 81       	ldd	r24, Y+6	; 0x06
    1418:	9f 81       	ldd	r25, Y+7	; 0x07
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 f0       	breq	.+24     	; 0x1436 <DIO_VoidSetPinValue+0x60>
    141e:	d2 c0       	rjmp	.+420    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
    1420:	2e 81       	ldd	r18, Y+6	; 0x06
    1422:	3f 81       	ldd	r19, Y+7	; 0x07
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	71 f1       	breq	.+92     	; 0x1486 <DIO_VoidSetPinValue+0xb0>
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	e9 f1       	breq	.+122    	; 0x14ae <DIO_VoidSetPinValue+0xd8>
    1434:	c7 c0       	rjmp	.+398    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
        {
            case DIO_PORTA: SET_BIT(PORTA_REG,Copy_U8Pin); break;
    1436:	ab e3       	ldi	r26, 0x3B	; 59
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb e3       	ldi	r30, 0x3B	; 59
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_VoidSetPinValue+0x7e>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_VoidSetPinValue+0x7a>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	b3 c0       	rjmp	.+358    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTB: SET_BIT(PORTB_REG,Copy_U8Pin); break;
    145e:	a8 e3       	ldi	r26, 0x38	; 56
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e8 e3       	ldi	r30, 0x38	; 56
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_VoidSetPinValue+0xa6>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_VoidSetPinValue+0xa2>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	9f c0       	rjmp	.+318    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTC: SET_BIT(PORTC_REG,Copy_U8Pin); break;
    1486:	a5 e3       	ldi	r26, 0x35	; 53
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e3       	ldi	r30, 0x35	; 53
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_VoidSetPinValue+0xce>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_VoidSetPinValue+0xca>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	8b c0       	rjmp	.+278    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTD: SET_BIT(PORTD_REG,Copy_U8Pin); break;
    14ae:	a2 e3       	ldi	r26, 0x32	; 50
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e2 e3       	ldi	r30, 0x32	; 50
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_VoidSetPinValue+0xf6>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_VoidSetPinValue+0xf2>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	77 c0       	rjmp	.+238    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>

        }

    }
    else if(Copy_U8Value==DIO_LOW)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	88 23       	and	r24, r24
    14da:	09 f0       	breq	.+2      	; 0x14de <DIO_VoidSetPinValue+0x108>
    14dc:	73 c0       	rjmp	.+230    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
    {
        switch (Copy_U8Port)
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3d 83       	std	Y+5, r19	; 0x05
    14e6:	2c 83       	std	Y+4, r18	; 0x04
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	59 f1       	breq	.+86     	; 0x1548 <DIO_VoidSetPinValue+0x172>
    14f2:	2c 81       	ldd	r18, Y+4	; 0x04
    14f4:	3d 81       	ldd	r19, Y+5	; 0x05
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	2c f4       	brge	.+10     	; 0x1506 <DIO_VoidSetPinValue+0x130>
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f0       	breq	.+26     	; 0x151e <DIO_VoidSetPinValue+0x148>
    1504:	5f c0       	rjmp	.+190    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
    1506:	2c 81       	ldd	r18, Y+4	; 0x04
    1508:	3d 81       	ldd	r19, Y+5	; 0x05
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	89 f1       	breq	.+98     	; 0x1572 <DIO_VoidSetPinValue+0x19c>
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <DIO_VoidSetPinValue+0x146>
    151a:	40 c0       	rjmp	.+128    	; 0x159c <DIO_VoidSetPinValue+0x1c6>
    151c:	53 c0       	rjmp	.+166    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
        {
            case DIO_PORTA: CLR_BIT(PORTA_REG,Copy_U8Pin); break;
    151e:	ab e3       	ldi	r26, 0x3B	; 59
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e3       	ldi	r30, 0x3B	; 59
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_VoidSetPinValue+0x166>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_VoidSetPinValue+0x162>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	3e c0       	rjmp	.+124    	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTB: CLR_BIT(PORTB_REG,Copy_U8Pin); break;
    1548:	a8 e3       	ldi	r26, 0x38	; 56
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_VoidSetPinValue+0x190>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_VoidSetPinValue+0x18c>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	29 c0       	rjmp	.+82     	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTC: CLR_BIT(PORTC_REG,Copy_U8Pin); break;
    1572:	a5 e3       	ldi	r26, 0x35	; 53
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_VoidSetPinValue+0x1ba>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_VoidSetPinValue+0x1b6>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTD: CLR_BIT(PORTD_REG,Copy_U8Pin); break;
    159c:	a2 e3       	ldi	r26, 0x32	; 50
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e2 e3       	ldi	r30, 0x32	; 50
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_VoidSetPinValue+0x1e4>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_VoidSetPinValue+0x1e0>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24

        }

    }

}
    15c4:	27 96       	adiw	r28, 0x07	; 7
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <DIO_VoidSetPortDirection>:

void  DIO_VoidSetPortDirection(u8 Copy_U8Port,u8 Copy_U8Direction)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <DIO_VoidSetPortDirection+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <DIO_VoidSetPortDirection+0x8>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3c 83       	std	Y+4, r19	; 0x04
    15ee:	2b 83       	std	Y+3, r18	; 0x03
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	d1 f0       	breq	.+52     	; 0x162e <DIO_VoidSetPortDirection+0x58>
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	2c f4       	brge	.+10     	; 0x160e <DIO_VoidSetPortDirection+0x38>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	61 f0       	breq	.+24     	; 0x1624 <DIO_VoidSetPortDirection+0x4e>
    160c:	1e c0       	rjmp	.+60     	; 0x164a <DIO_VoidSetPortDirection+0x74>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <DIO_VoidSetPortDirection+0x62>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	81 f0       	breq	.+32     	; 0x1642 <DIO_VoidSetPortDirection+0x6c>
    1622:	13 c0       	rjmp	.+38     	; 0x164a <DIO_VoidSetPortDirection+0x74>
    {
        case     DIO_PORTA: DDRA_REG = Copy_U8Direction; break;
    1624:	ea e3       	ldi	r30, 0x3A	; 58
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
    162c:	0e c0       	rjmp	.+28     	; 0x164a <DIO_VoidSetPortDirection+0x74>
        case     DIO_PORTB: DDRB_REG = Copy_U8Direction; break;
    162e:	e7 e3       	ldi	r30, 0x37	; 55
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
    1636:	09 c0       	rjmp	.+18     	; 0x164a <DIO_VoidSetPortDirection+0x74>
        case     DIO_PORTC: DDRC_REG = Copy_U8Direction; break;
    1638:	e4 e3       	ldi	r30, 0x34	; 52
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
    1640:	04 c0       	rjmp	.+8      	; 0x164a <DIO_VoidSetPortDirection+0x74>
        case     DIO_PORTD: DDRD_REG = Copy_U8Direction; break;
    1642:	e1 e3       	ldi	r30, 0x31	; 49
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24

    }

}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <DIO_VoidSetPortValue>:

void  DIO_VoidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Value)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <DIO_VoidSetPortValue+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <DIO_VoidSetPortValue+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3c 83       	std	Y+4, r19	; 0x04
    1670:	2b 83       	std	Y+3, r18	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	d1 f0       	breq	.+52     	; 0x16b0 <DIO_VoidSetPortValue+0x58>
    167c:	2b 81       	ldd	r18, Y+3	; 0x03
    167e:	3c 81       	ldd	r19, Y+4	; 0x04
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <DIO_VoidSetPortValue+0x38>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 f0       	breq	.+24     	; 0x16a6 <DIO_VoidSetPortValue+0x4e>
    168e:	1e c0       	rjmp	.+60     	; 0x16cc <DIO_VoidSetPortValue+0x74>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <DIO_VoidSetPortValue+0x62>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <DIO_VoidSetPortValue+0x6c>
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <DIO_VoidSetPortValue+0x74>
    {
        case     DIO_PORTA: PORTA_REG = Copy_U8Value; break;
    16a6:	eb e3       	ldi	r30, 0x3B	; 59
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
    16ae:	0e c0       	rjmp	.+28     	; 0x16cc <DIO_VoidSetPortValue+0x74>
        case     DIO_PORTB: PORTB_REG = Copy_U8Value; break;
    16b0:	e8 e3       	ldi	r30, 0x38	; 56
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <DIO_VoidSetPortValue+0x74>
        case     DIO_PORTC: PORTC_REG = Copy_U8Value; break;
    16ba:	e5 e3       	ldi	r30, 0x35	; 53
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	80 83       	st	Z, r24
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <DIO_VoidSetPortValue+0x74>
        case     DIO_PORTD: PORTD_REG = Copy_U8Value; break;
    16c4:	e2 e3       	ldi	r30, 0x32	; 50
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24

    }

}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <DIO_VoidTogglePin>:

void  DIO_VoidTogglePin(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <DIO_VoidTogglePin+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <DIO_VoidTogglePin+0x8>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3c 83       	std	Y+4, r19	; 0x04
    16f2:	2b 83       	std	Y+3, r18	; 0x03
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	49 f1       	breq	.+82     	; 0x1750 <DIO_VoidTogglePin+0x76>
    16fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1700:	3c 81       	ldd	r19, Y+4	; 0x04
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	2c f4       	brge	.+10     	; 0x1712 <DIO_VoidTogglePin+0x38>
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	61 f0       	breq	.+24     	; 0x1728 <DIO_VoidTogglePin+0x4e>
    1710:	5a c0       	rjmp	.+180    	; 0x17c6 <DIO_VoidTogglePin+0xec>
    1712:	2b 81       	ldd	r18, Y+3	; 0x03
    1714:	3c 81       	ldd	r19, Y+4	; 0x04
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	71 f1       	breq	.+92     	; 0x1778 <DIO_VoidTogglePin+0x9e>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	91 05       	cpc	r25, r1
    1724:	e9 f1       	breq	.+122    	; 0x17a0 <DIO_VoidTogglePin+0xc6>
    1726:	4f c0       	rjmp	.+158    	; 0x17c6 <DIO_VoidTogglePin+0xec>
    {
        case DIO_PORTA: TOGGLE_BIT(PORTA_REG,Copy_U8Pin); break;
    1728:	ab e3       	ldi	r26, 0x3B	; 59
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_VoidTogglePin+0x6c>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_VoidTogglePin+0x68>
    174a:	84 27       	eor	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	3b c0       	rjmp	.+118    	; 0x17c6 <DIO_VoidTogglePin+0xec>
        case DIO_PORTB: TOGGLE_BIT(PORTB_REG,Copy_U8Pin); break;
    1750:	a8 e3       	ldi	r26, 0x38	; 56
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e8 e3       	ldi	r30, 0x38	; 56
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_VoidTogglePin+0x94>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_VoidTogglePin+0x90>
    1772:	84 27       	eor	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	27 c0       	rjmp	.+78     	; 0x17c6 <DIO_VoidTogglePin+0xec>
        case DIO_PORTC: TOGGLE_BIT(PORTC_REG,Copy_U8Pin); break;
    1778:	a5 e3       	ldi	r26, 0x35	; 53
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e3       	ldi	r30, 0x35	; 53
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_VoidTogglePin+0xbc>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_VoidTogglePin+0xb8>
    179a:	84 27       	eor	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	13 c0       	rjmp	.+38     	; 0x17c6 <DIO_VoidTogglePin+0xec>
        case DIO_PORTD: TOGGLE_BIT(PORTD_REG,Copy_U8Pin); break;
    17a0:	a2 e3       	ldi	r26, 0x32	; 50
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e2 e3       	ldi	r30, 0x32	; 50
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_VoidTogglePin+0xe4>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_VoidTogglePin+0xe0>
    17c2:	84 27       	eor	r24, r20
    17c4:	8c 93       	st	X, r24

    }
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <DIO_U8GetPinValue+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <DIO_U8GetPinValue+0x8>
    17dc:	0f 92       	push	r0
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	8a 83       	std	Y+2, r24	; 0x02
    17e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_ReturnedValue; 			// LOC mean local variable
	switch(Copy_U8Port)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3d 83       	std	Y+5, r19	; 0x05
    17ee:	2c 83       	std	Y+4, r18	; 0x04
    17f0:	4c 81       	ldd	r20, Y+4	; 0x04
    17f2:	5d 81       	ldd	r21, Y+5	; 0x05
    17f4:	41 30       	cpi	r20, 0x01	; 1
    17f6:	51 05       	cpc	r21, r1
    17f8:	41 f1       	breq	.+80     	; 0x184a <DIO_U8GetPinValue+0x76>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	91 05       	cpc	r25, r1
    1802:	34 f4       	brge	.+12     	; 0x1810 <DIO_U8GetPinValue+0x3c>
    1804:	2c 81       	ldd	r18, Y+4	; 0x04
    1806:	3d 81       	ldd	r19, Y+5	; 0x05
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	61 f0       	breq	.+24     	; 0x1826 <DIO_U8GetPinValue+0x52>
    180e:	52 c0       	rjmp	.+164    	; 0x18b4 <DIO_U8GetPinValue+0xe0>
    1810:	4c 81       	ldd	r20, Y+4	; 0x04
    1812:	5d 81       	ldd	r21, Y+5	; 0x05
    1814:	42 30       	cpi	r20, 0x02	; 2
    1816:	51 05       	cpc	r21, r1
    1818:	51 f1       	breq	.+84     	; 0x186e <DIO_U8GetPinValue+0x9a>
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	91 05       	cpc	r25, r1
    1822:	b9 f1       	breq	.+110    	; 0x1892 <DIO_U8GetPinValue+0xbe>
    1824:	47 c0       	rjmp	.+142    	; 0x18b4 <DIO_U8GetPinValue+0xe0>
	{
		case DIO_PORTA: LOC_ReturnedValue= GET_BIT(PINA_REG,Copy_U8Pin); break;
    1826:	e9 e3       	ldi	r30, 0x39	; 57
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_U8GetPinValue+0x6a>
    183a:	55 95       	asr	r21
    183c:	47 95       	ror	r20
    183e:	8a 95       	dec	r24
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_U8GetPinValue+0x66>
    1842:	ca 01       	movw	r24, r20
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	35 c0       	rjmp	.+106    	; 0x18b4 <DIO_U8GetPinValue+0xe0>
		case DIO_PORTB: LOC_ReturnedValue= GET_BIT(PINB_REG,Copy_U8Pin); break;
    184a:	e6 e3       	ldi	r30, 0x36	; 54
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a9 01       	movw	r20, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_U8GetPinValue+0x8e>
    185e:	55 95       	asr	r21
    1860:	47 95       	ror	r20
    1862:	8a 95       	dec	r24
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_U8GetPinValue+0x8a>
    1866:	ca 01       	movw	r24, r20
    1868:	81 70       	andi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	23 c0       	rjmp	.+70     	; 0x18b4 <DIO_U8GetPinValue+0xe0>
		case DIO_PORTC: LOC_ReturnedValue= GET_BIT(PINC_REG,Copy_U8Pin); break;
    186e:	e3 e3       	ldi	r30, 0x33	; 51
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a9 01       	movw	r20, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_U8GetPinValue+0xb2>
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_U8GetPinValue+0xae>
    188a:	ca 01       	movw	r24, r20
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <DIO_U8GetPinValue+0xe0>
		case DIO_PORTD: LOC_ReturnedValue= GET_BIT(PIND_REG,Copy_U8Pin); break;
    1892:	e0 e3       	ldi	r30, 0x30	; 48
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_U8GetPinValue+0xd6>
    18a6:	55 95       	asr	r21
    18a8:	47 95       	ror	r20
    18aa:	8a 95       	dec	r24
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_U8GetPinValue+0xd2>
    18ae:	ca 01       	movw	r24, r20
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return LOC_ReturnedValue;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <LCD_voidWriteCommand>:
  * Description : write command to LCD
  * Arguments   : u8 Command       
  * return      : void
  */
  void LCD_voidWriteCommand(u8 Copy_u8Command)
  {
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	2f 97       	sbiw	r28, 0x0f	; 15
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	8f 87       	std	Y+15, r24	; 0x0f
	  /*Set RW pin 0 (Write Mode selected)*/
	  DIO_VoidSetPinValue(ContREG,LCD_RW,DIO_LOW) ;
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	66 e0       	ldi	r22, 0x06	; 6
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
	  /*Set RS pin 0 (Instruction register selected)*/
	  DIO_VoidSetPinValue(ContREG,LCD_RS,DIO_LOW) ;
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	67 e0       	ldi	r22, 0x07	; 7
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
	  /*output instruction data to Data Bus*/
	  switch(Copy_u8Command)
    18f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	51 f4       	brne	.+20     	; 0x1910 <LCD_voidWriteCommand+0x4a>
	  {
		  /*if command value is 1 clear data register and output 1 to it*/
		  case 1  : { DIO_VoidSetPortValue(DataREG,DIO_LOW); DIO_VoidSetPinValue(DataREG,LCD_DATA_REG_PIN0,DIO_HIGH); } break;
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_VoidSetPortValue>
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <LCD_voidWriteCommand+0x52>
		  /*else output command to data register*/
		  default : { DIO_VoidSetPortValue(DataREG,Copy_u8Command); }
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	6f 85       	ldd	r22, Y+15	; 0x0f
    1914:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_VoidSetPortValue>

	  }/*end of switch case*/

	  /*Set EN pin 1 (LCD Read data )*/
	  DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_HIGH);
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	65 e0       	ldi	r22, 0x05	; 5
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e4       	ldi	r27, 0x40	; 64
    192a:	8b 87       	std	Y+11, r24	; 0x0b
    192c:	9c 87       	std	Y+12, r25	; 0x0c
    192e:	ad 87       	std	Y+13, r26	; 0x0d
    1930:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	6b 85       	ldd	r22, Y+11	; 0x0b
    1934:	7c 85       	ldd	r23, Y+12	; 0x0c
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4a ef       	ldi	r20, 0xFA	; 250
    1940:	54 e4       	ldi	r21, 0x44	; 68
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8f 83       	std	Y+7, r24	; 0x07
    194c:	98 87       	std	Y+8, r25	; 0x08
    194e:	a9 87       	std	Y+9, r26	; 0x09
    1950:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1952:	6f 81       	ldd	r22, Y+7	; 0x07
    1954:	78 85       	ldd	r23, Y+8	; 0x08
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <LCD_voidWriteCommand+0xae>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <LCD_voidWriteCommand+0x12c>
	else if (__tmp > 65535)
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <LCD_voidWriteCommand+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	6b 85       	ldd	r22, Y+11	; 0x0b
    198e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1990:	8d 85       	ldd	r24, Y+13	; 0x0d
    1992:	9e 85       	ldd	r25, Y+14	; 0x0e
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <LCD_voidWriteCommand+0x10e>
    19b6:	88 ec       	ldi	r24, 0xC8	; 200
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_voidWriteCommand+0xfc>
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <LCD_voidWriteCommand+0xf0>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <LCD_voidWriteCommand+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	6f 81       	ldd	r22, Y+7	; 0x07
    19e0:	78 85       	ldd	r23, Y+8	; 0x08
    19e2:	89 85       	ldd	r24, Y+9	; 0x09
    19e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_voidWriteCommand+0x138>
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
	  //_delay_ms(2);
	  _delay_ms(2);
	  /*Set EN pin 0 (LCD Write data to its reg)*/
	  DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_LOW) ;
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	65 e0       	ldi	r22, 0x05	; 5
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>

  }/*end of LCD_u8WriteCommand()*/
    1a10:	2f 96       	adiw	r28, 0x0f	; 15
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <LCD_voidWriteData>:
 * Description : write Data to LCD
 * Arguments   : u8 Data
 * return      : void
 */
 void LCD_voidWriteData(u8 Copy_u8Data)
 {
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	2f 97       	sbiw	r28, 0x0f	; 15
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	8f 87       	std	Y+15, r24	; 0x0f
	 /*Set RW pin 0 (Write Mode selected)*/
	 DIO_VoidSetPinValue(ContREG,LCD_RW,DIO_LOW);
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	66 e0       	ldi	r22, 0x06	; 6
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
	 /*Set RS pin 1 (Data register selected)*/
	 DIO_VoidSetPinValue(ContREG,LCD_RS,DIO_HIGH);
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	67 e0       	ldi	r22, 0x07	; 7
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
	 /*output data to Data Bus*/
	 /*output instruction data to Data Bus*/
	 switch(Copy_u8Data)
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	51 f4       	brne	.+20     	; 0x1a6c <LCD_voidWriteData+0x4a>
	 {
		 /*if Data value is 1 clear data register and output 1 to it*/
		 case 1  : { DIO_VoidSetPortValue(DataREG,DIO_LOW); DIO_VoidSetPinValue(DataREG,LCD_DATA_REG_PIN0,DIO_HIGH); } break;
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_VoidSetPortValue>
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <LCD_voidWriteData+0x52>
		 /*else output Data to data register*/
		 default : { DIO_VoidSetPortValue(DataREG,Copy_u8Data); }
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a70:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_VoidSetPortValue>

	 }/*end of switch case*/

	 /*Set EN pin 1 (LCD Read data )*/
	 DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_HIGH);
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	65 e0       	ldi	r22, 0x05	; 5
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e4       	ldi	r27, 0x40	; 64
    1a86:	8b 87       	std	Y+11, r24	; 0x0b
    1a88:	9c 87       	std	Y+12, r25	; 0x0c
    1a8a:	ad 87       	std	Y+13, r26	; 0x0d
    1a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8f 83       	std	Y+7, r24	; 0x07
    1aa8:	98 87       	std	Y+8, r25	; 0x08
    1aaa:	a9 87       	std	Y+9, r26	; 0x09
    1aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <LCD_voidWriteData+0xae>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <LCD_voidWriteData+0x12c>
	else if (__tmp > 65535)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <LCD_voidWriteData+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <LCD_voidWriteData+0x10e>
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_voidWriteData+0xfc>
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <LCD_voidWriteData+0xf0>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <LCD_voidWriteData+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_voidWriteData+0x138>
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
	 //_delay_ms(2);
	 _delay_ms(2);
	 /*Set EN pin 0 (LCD Write data to its reg)*/
	 DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_LOW);
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	65 e0       	ldi	r22, 0x05	; 5
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>

 }/*end of LCD_u8WriteData()*/
    1b6c:	2f 96       	adiw	r28, 0x0f	; 15
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <LCD_voidInitializeLCD>:
 *               in 4 bit mode control and data register must be the same register
 * Arguments   : void
 * return      : void
 */
 void LCD_voidInitializeLCD(void)
 {
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	c8 54       	subi	r28, 0x48	; 72
    1b8c:	d0 40       	sbci	r29, 0x00	; 0
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
	 /*==============================================================
	  * Configure LCD pins direction
	  *==============================================================*/
	 /*Configure RS Pin output*/
	 DIO_VoidSetPinDirection(ContREG,LCD_RS,DIO_OUTPUT_PIN);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_VoidSetPinDirection>
	 /*Configure RW Pin output*/
	 DIO_VoidSetPinDirection(ContREG,LCD_RW,DIO_OUTPUT_PIN);
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	66 e0       	ldi	r22, 0x06	; 6
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_VoidSetPinDirection>
	 /*Configure EN Pin output*/
	 DIO_VoidSetPinDirection(ContREG,LCD_EN,DIO_OUTPUT_PIN);
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	65 e0       	ldi	r22, 0x05	; 5
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_VoidSetPinDirection>
	 /*Configure Data register output*/
	 DIO_VoidSetPortDirection(DataREG,DIO_OUTPUT_PIN);
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_VoidSetPortDirection>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 5b       	subi	r30, 0xBD	; 189
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a8 e4       	ldi	r26, 0x48	; 72
    1bca:	b2 e4       	ldi	r27, 0x42	; 66
    1bcc:	80 83       	st	Z, r24
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	a2 83       	std	Z+2, r26	; 0x02
    1bd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	01 5c       	subi	r16, 0xC1	; 193
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ed 5b       	subi	r30, 0xBD	; 189
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	80 83       	st	Z, r24
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	a2 83       	std	Z+2, r26	; 0x02
    1c00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c02:	fe 01       	movw	r30, r28
    1c04:	ff 96       	adiw	r30, 0x3f	; 63
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_voidInitializeLCD+0xaa>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9e af       	std	Y+62, r25	; 0x3e
    1c24:	8d af       	std	Y+61, r24	; 0x3d
    1c26:	46 c0       	rjmp	.+140    	; 0x1cb4 <LCD_voidInitializeLCD+0x136>
	else if (__tmp > 65535)
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ff 96       	adiw	r30, 0x3f	; 63
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	64 f5       	brge	.+88     	; 0x1c9c <LCD_voidInitializeLCD+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	fe 01       	movw	r30, r28
    1c46:	ed 5b       	subi	r30, 0xBD	; 189
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e af       	std	Y+62, r25	; 0x3e
    1c70:	8d af       	std	Y+61, r24	; 0x3d
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_voidInitializeLCD+0x114>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c af       	std	Y+60, r25	; 0x3c
    1c7a:	8b af       	std	Y+59, r24	; 0x3b
    1c7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c7e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_voidInitializeLCD+0x102>
    1c84:	9c af       	std	Y+60, r25	; 0x3c
    1c86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9e af       	std	Y+62, r25	; 0x3e
    1c90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_voidInitializeLCD+0xf6>
    1c9a:	16 c0       	rjmp	.+44     	; 0x1cc8 <LCD_voidInitializeLCD+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ff 96       	adiw	r30, 0x3f	; 63
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e af       	std	Y+62, r25	; 0x3e
    1cb2:	8d af       	std	Y+61, r24	; 0x3d
    1cb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb8:	9a af       	std	Y+58, r25	; 0x3a
    1cba:	89 af       	std	Y+57, r24	; 0x39
    1cbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cbe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_voidInitializeLCD+0x142>
    1cc4:	9a af       	std	Y+58, r25	; 0x3a
    1cc6:	89 af       	std	Y+57, r24	; 0x39

	 /*==============================================================
	  * Choose font size and number of lines
	  *==============================================================*/
	 /*Set Font size value 5*7 dots or 5*10 dots*/
	  SET_BIT_VALUE(FontSizeAndLineCommand,LCD_FONT_BIT,LCD_FONT_SIZE);
    1cc8:	80 91 25 02 	lds	r24, 0x0225
    1ccc:	8b 7f       	andi	r24, 0xFB	; 251
    1cce:	80 93 25 02 	sts	0x0225, r24
	 /*Set number of lines 1 or 2*/
	  SET_BIT_VALUE(FontSizeAndLineCommand,LCD_LINE_BIT,LCD_LINE_MODE);
    1cd2:	80 91 25 02 	lds	r24, 0x0225
    1cd6:	88 60       	ori	r24, 0x08	; 8
    1cd8:	80 93 25 02 	sts	0x0225, r24
	  *==============================================================
	  * 8Bit Mode initialization
	  *====================================*/
	 #if (LCD_MODE == LCD_8BIT)
	    /*Choose 8Bit mode in function set instruction*/
		SET_BIT(FontSizeAndLineCommand,LCD_DATALENGTH_BIT);
    1cdc:	80 91 25 02 	lds	r24, 0x0225
    1ce0:	80 61       	ori	r24, 0x10	; 16
    1ce2:	80 93 25 02 	sts	0x0225, r24
		/*send Function set instruction*/
		LCD_voidWriteCommand(FontSizeAndLineCommand);
    1ce6:	80 91 25 02 	lds	r24, 0x0225
    1cea:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e8       	ldi	r26, 0x80	; 128
    1cf4:	bf e3       	ldi	r27, 0x3F	; 63
    1cf6:	8d ab       	std	Y+53, r24	; 0x35
    1cf8:	9e ab       	std	Y+54, r25	; 0x36
    1cfa:	af ab       	std	Y+55, r26	; 0x37
    1cfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	6d a9       	ldd	r22, Y+53	; 0x35
    1d00:	7e a9       	ldd	r23, Y+54	; 0x36
    1d02:	8f a9       	ldd	r24, Y+55	; 0x37
    1d04:	98 ad       	ldd	r25, Y+56	; 0x38
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a ef       	ldi	r20, 0xFA	; 250
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	89 ab       	std	Y+49, r24	; 0x31
    1d18:	9a ab       	std	Y+50, r25	; 0x32
    1d1a:	ab ab       	std	Y+51, r26	; 0x33
    1d1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d20:	7a a9       	ldd	r23, Y+50	; 0x32
    1d22:	8b a9       	ldd	r24, Y+51	; 0x33
    1d24:	9c a9       	ldd	r25, Y+52	; 0x34
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <LCD_voidInitializeLCD+0x1c2>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	98 ab       	std	Y+48, r25	; 0x30
    1d3c:	8f a7       	std	Y+47, r24	; 0x2f
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <LCD_voidInitializeLCD+0x240>
	else if (__tmp > 65535)
    1d40:	69 a9       	ldd	r22, Y+49	; 0x31
    1d42:	7a a9       	ldd	r23, Y+50	; 0x32
    1d44:	8b a9       	ldd	r24, Y+51	; 0x33
    1d46:	9c a9       	ldd	r25, Y+52	; 0x34
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <LCD_voidInitializeLCD+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	6d a9       	ldd	r22, Y+53	; 0x35
    1d5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	98 ab       	std	Y+48, r25	; 0x30
    1d7e:	8f a7       	std	Y+47, r24	; 0x2f
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <LCD_voidInitializeLCD+0x222>
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9e a7       	std	Y+46, r25	; 0x2e
    1d88:	8d a7       	std	Y+45, r24	; 0x2d
    1d8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <LCD_voidInitializeLCD+0x210>
    1d92:	9e a7       	std	Y+46, r25	; 0x2e
    1d94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d98:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	98 ab       	std	Y+48, r25	; 0x30
    1d9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da2:	98 a9       	ldd	r25, Y+48	; 0x30
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <LCD_voidInitializeLCD+0x204>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <LCD_voidInitializeLCD+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dac:	7a a9       	ldd	r23, Y+50	; 0x32
    1dae:	8b a9       	ldd	r24, Y+51	; 0x33
    1db0:	9c a9       	ldd	r25, Y+52	; 0x34
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	98 ab       	std	Y+48, r25	; 0x30
    1dbc:	8f a7       	std	Y+47, r24	; 0x2f
    1dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc2:	9c a7       	std	Y+44, r25	; 0x2c
    1dc4:	8b a7       	std	Y+43, r24	; 0x2b
    1dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_voidInitializeLCD+0x24c>
    1dce:	9c a7       	std	Y+44, r25	; 0x2c
    1dd0:	8b a7       	std	Y+43, r24	; 0x2b
		//_delay_ms(1);
		_delay_ms(1);
	 #endif

	 /*send Display ON OFF instruction*/
	 LCD_voidWriteCommand(DisplayAndCursorCommand);
    1dd2:	80 91 24 02 	lds	r24, 0x0224
    1dd6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	8f a3       	std	Y+39, r24	; 0x27
    1de4:	98 a7       	std	Y+40, r25	; 0x28
    1de6:	a9 a7       	std	Y+41, r26	; 0x29
    1de8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6f a1       	ldd	r22, Y+39	; 0x27
    1dec:	78 a5       	ldd	r23, Y+40	; 0x28
    1dee:	89 a5       	ldd	r24, Y+41	; 0x29
    1df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a ef       	ldi	r20, 0xFA	; 250
    1df8:	54 e4       	ldi	r21, 0x44	; 68
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	8b a3       	std	Y+35, r24	; 0x23
    1e04:	9c a3       	std	Y+36, r25	; 0x24
    1e06:	ad a3       	std	Y+37, r26	; 0x25
    1e08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e10:	9e a1       	ldd	r25, Y+38	; 0x26
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <LCD_voidInitializeLCD+0x2ae>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <LCD_voidInitializeLCD+0x32c>
	else if (__tmp > 65535)
    1e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e30:	8d a1       	ldd	r24, Y+37	; 0x25
    1e32:	9e a1       	ldd	r25, Y+38	; 0x26
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <LCD_voidInitializeLCD+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6f a1       	ldd	r22, Y+39	; 0x27
    1e46:	78 a5       	ldd	r23, Y+40	; 0x28
    1e48:	89 a5       	ldd	r24, Y+41	; 0x29
    1e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <LCD_voidInitializeLCD+0x30e>
    1e6e:	88 ec       	ldi	r24, 0xC8	; 200
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	98 a3       	std	Y+32, r25	; 0x20
    1e74:	8f 8f       	std	Y+31, r24	; 0x1f
    1e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e78:	98 a1       	ldd	r25, Y+32	; 0x20
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_voidInitializeLCD+0x2fc>
    1e7e:	98 a3       	std	Y+32, r25	; 0x20
    1e80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	9a a3       	std	Y+34, r25	; 0x22
    1e8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <LCD_voidInitializeLCD+0x2f0>
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <LCD_voidInitializeLCD+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	6b a1       	ldd	r22, Y+35	; 0x23
    1e98:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9a a3       	std	Y+34, r25	; 0x22
    1ea8:	89 a3       	std	Y+33, r24	; 0x21
    1eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    1eac:	9a a1       	ldd	r25, Y+34	; 0x22
    1eae:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb0:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_voidInitializeLCD+0x338>
    1eba:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebc:	8d 8f       	std	Y+29, r24	; 0x1d
	 //_delay_ms(1);
	 _delay_ms(1);
	 /*send Display clear instruction*/
	 LCD_voidWriteCommand(LCD_DISP_CLEAR);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e0       	ldi	r26, 0x00	; 0
    1eca:	b0 e4       	ldi	r27, 0x40	; 64
    1ecc:	89 8f       	std	Y+25, r24	; 0x19
    1ece:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a ef       	ldi	r20, 0xFA	; 250
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8d 8b       	std	Y+21, r24	; 0x15
    1eee:	9e 8b       	std	Y+22, r25	; 0x16
    1ef0:	af 8b       	std	Y+23, r26	; 0x17
    1ef2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    1efa:	98 8d       	ldd	r25, Y+24	; 0x18
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <LCD_voidInitializeLCD+0x398>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <LCD_voidInitializeLCD+0x416>
	else if (__tmp > 65535)
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <LCD_voidInitializeLCD+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9c 8b       	std	Y+20, r25	; 0x14
    1f54:	8b 8b       	std	Y+19, r24	; 0x13
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <LCD_voidInitializeLCD+0x3f8>
    1f58:	88 ec       	ldi	r24, 0xC8	; 200
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9a 8b       	std	Y+18, r25	; 0x12
    1f5e:	89 8b       	std	Y+17, r24	; 0x11
    1f60:	89 89       	ldd	r24, Y+17	; 0x11
    1f62:	9a 89       	ldd	r25, Y+18	; 0x12
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_voidInitializeLCD+0x3e6>
    1f68:	9a 8b       	std	Y+18, r25	; 0x12
    1f6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	9c 8b       	std	Y+20, r25	; 0x14
    1f74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8b 89       	ldd	r24, Y+19	; 0x13
    1f78:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <LCD_voidInitializeLCD+0x3da>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <LCD_voidInitializeLCD+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	6d 89       	ldd	r22, Y+21	; 0x15
    1f82:	7e 89       	ldd	r23, Y+22	; 0x16
    1f84:	8f 89       	ldd	r24, Y+23	; 0x17
    1f86:	98 8d       	ldd	r25, Y+24	; 0x18
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9c 8b       	std	Y+20, r25	; 0x14
    1f92:	8b 8b       	std	Y+19, r24	; 0x13
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	98 8b       	std	Y+16, r25	; 0x10
    1f9a:	8f 87       	std	Y+15, r24	; 0x0f
    1f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9e:	98 89       	ldd	r25, Y+16	; 0x10
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_voidInitializeLCD+0x422>
    1fa4:	98 8b       	std	Y+16, r25	; 0x10
    1fa6:	8f 87       	std	Y+15, r24	; 0x0f
	 //_delay_ms(2);
	 _delay_ms(2);
	 /*send ENTRY MODE set instruction*/
	 LCD_voidWriteCommand(LCD_ENTRY_MODE);
    1fa8:	86 e0       	ldi	r24, 0x06	; 6
    1faa:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e0       	ldi	r26, 0x00	; 0
    1fb4:	b0 e4       	ldi	r27, 0x40	; 64
    1fb6:	8b 87       	std	Y+11, r24	; 0x0b
    1fb8:	9c 87       	std	Y+12, r25	; 0x0c
    1fba:	ad 87       	std	Y+13, r26	; 0x0d
    1fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f 83       	std	Y+7, r24	; 0x07
    1fd8:	98 87       	std	Y+8, r25	; 0x08
    1fda:	a9 87       	std	Y+9, r26	; 0x09
    1fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_voidInitializeLCD+0x482>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_voidInitializeLCD+0x500>
	else if (__tmp > 65535)
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_voidInitializeLCD+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_voidInitializeLCD+0x4e2>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_voidInitializeLCD+0x4d0>
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_voidInitializeLCD+0x4c4>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_voidInitializeLCD+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_voidInitializeLCD+0x50c>
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01

	 /*=============================================================================
	  * Initialize custom made characters with pre-configured arrays' values
	  *=============================================================================*/
	 /*jump to CGRAM address*/
	 LCD_voidWriteCommand(LCD_CGRAM_ADDRESS);
    2092:	80 e4       	ldi	r24, 0x40	; 64
    2094:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

	 /*fill GCRAM with LCD_u8CustomCharArray values*/
	 for (u8 i = 0 ; i < 8 ; i++)
    2098:	fe 01       	movw	r30, r28
    209a:	e8 5b       	subi	r30, 0xB8	; 184
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	10 82       	st	Z, r1
    20a0:	38 c0       	rjmp	.+112    	; 0x2112 <LCD_voidInitializeLCD+0x594>
	 {
		 for (u8 j = 0 ; j < 8 ; j++)
    20a2:	fe 01       	movw	r30, r28
    20a4:	e9 5b       	subi	r30, 0xB9	; 185
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	10 82       	st	Z, r1
    20aa:	24 c0       	rjmp	.+72     	; 0x20f4 <LCD_voidInitializeLCD+0x576>
		 {
			 LCD_voidWriteData(LCD_u8CustomCharArray[i][j]);
    20ac:	fe 01       	movw	r30, r28
    20ae:	e8 5b       	subi	r30, 0xB8	; 184
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	fe 01       	movw	r30, r28
    20ba:	e9 5b       	subi	r30, 0xB9	; 185
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	ca 01       	movw	r24, r20
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	82 0f       	add	r24, r18
    20d4:	93 1f       	adc	r25, r19
    20d6:	fc 01       	movw	r30, r24
    20d8:	ee 5d       	subi	r30, 0xDE	; 222
    20da:	fb 4f       	sbci	r31, 0xFB	; 251
    20dc:	80 81       	ld	r24, Z
    20de:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_voidWriteData>
	 LCD_voidWriteCommand(LCD_CGRAM_ADDRESS);

	 /*fill GCRAM with LCD_u8CustomCharArray values*/
	 for (u8 i = 0 ; i < 8 ; i++)
	 {
		 for (u8 j = 0 ; j < 8 ; j++)
    20e2:	de 01       	movw	r26, r28
    20e4:	a9 5b       	subi	r26, 0xB9	; 185
    20e6:	bf 4f       	sbci	r27, 0xFF	; 255
    20e8:	fe 01       	movw	r30, r28
    20ea:	e9 5b       	subi	r30, 0xB9	; 185
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	8c 93       	st	X, r24
    20f4:	fe 01       	movw	r30, r28
    20f6:	e9 5b       	subi	r30, 0xB9	; 185
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	b0 f2       	brcs	.-84     	; 0x20ac <LCD_voidInitializeLCD+0x52e>
	  *=============================================================================*/
	 /*jump to CGRAM address*/
	 LCD_voidWriteCommand(LCD_CGRAM_ADDRESS);

	 /*fill GCRAM with LCD_u8CustomCharArray values*/
	 for (u8 i = 0 ; i < 8 ; i++)
    2100:	de 01       	movw	r26, r28
    2102:	a8 5b       	subi	r26, 0xB8	; 184
    2104:	bf 4f       	sbci	r27, 0xFF	; 255
    2106:	fe 01       	movw	r30, r28
    2108:	e8 5b       	subi	r30, 0xB8	; 184
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	8f 5f       	subi	r24, 0xFF	; 255
    2110:	8c 93       	st	X, r24
    2112:	fe 01       	movw	r30, r28
    2114:	e8 5b       	subi	r30, 0xB8	; 184
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	10 f2       	brcs	.-124    	; 0x20a2 <LCD_voidInitializeLCD+0x524>
		 }/*end of j loop*/

	 }/*end of i loop*/

	 /*return to DDRAM address 1*/
	 LCD_voidWriteCommand(LCD_DDRAM_ADD1);
    211e:	80 e8       	ldi	r24, 0x80	; 128
    2120:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

 }/*end of LCD_u8InitializeLCD()*/
    2124:	c8 5b       	subi	r28, 0xB8	; 184
    2126:	df 4f       	sbci	r29, 0xFF	; 255
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	08 95       	ret

0000213c <LCD_voidClearLCD>:
  * Description : clear LCD and return cursor to first position
  * Arguments   : void
  * return      : void
  */
  void LCD_voidClearLCD(void)
  {
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
	  /*send Display clear instruction*/
	  LCD_voidWriteCommand(LCD_DISP_CLEAR);
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

  }/*end of LCD_voidClearLCD()*/
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <LCD_voidReturnHome>:
  * Description : return cursor to first position LCD content doesn't affect
  * Arguments   : void
  * return      : void
  */
  void LCD_voidReturnHome(void)
  {
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	  /*send Return home instruction*/
	  LCD_voidWriteCommand(LCD_RET_HOME);
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

  }/*end of LCD_voidReturnHome()*/
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_voidSelectLine>:
  * Description : Select line 1 or 2 in LCD
  * Arguments   : choose line from (LCD_LINE1 or LCD_LINE2)
  * return      : void
  */
  void LCD_voidSelectLine(u8 Copy_u8Line)
  {
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <LCD_voidSelectLine+0x6>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	89 83       	std	Y+1, r24	; 0x01
	  /*choose line*/
	  switch(Copy_u8Line)
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3b 83       	std	Y+3, r19	; 0x03
    217a:	2a 83       	std	Y+2, r18	; 0x02
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	31 f0       	breq	.+12     	; 0x2192 <LCD_voidSelectLine+0x2e>
    2186:	2a 81       	ldd	r18, Y+2	; 0x02
    2188:	3b 81       	ldd	r19, Y+3	; 0x03
    218a:	22 30       	cpi	r18, 0x02	; 2
    218c:	31 05       	cpc	r19, r1
    218e:	29 f0       	breq	.+10     	; 0x219a <LCD_voidSelectLine+0x36>
    2190:	07 c0       	rjmp	.+14     	; 0x21a0 <LCD_voidSelectLine+0x3c>
	  {
		  case LCD_LINE1 : {  LCD_voidWriteCommand(LCD_DDRAM_ADD1); } break;
    2192:	80 e8       	ldi	r24, 0x80	; 128
    2194:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <LCD_voidSelectLine+0x3c>
		  case LCD_LINE2 : {  LCD_voidWriteCommand(LCD_DDRAM_ADD2); } break;
    219a:	80 ec       	ldi	r24, 0xC0	; 192
    219c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

	  }/*end of line switch case*/

  }/*end of LCD_voidSelectLine()*/
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <LCD_voidSetCursorPosition>:
  * Arguments   : line LCD_LINE1 or LCD_LINE2
  *               Position from 1 to 16
  * return      : void
  */
  void LCD_voidSetCursorPosition(u8 Copy_u8Line,u8 Copy_u8Position)
  {
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <LCD_voidSetCursorPosition+0x6>
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <LCD_voidSetCursorPosition+0x8>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	6a 83       	std	Y+2, r22	; 0x02
	  /*choose line*/
	  switch(Copy_u8Line)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3c 83       	std	Y+4, r19	; 0x04
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	31 f0       	breq	.+12     	; 0x21dc <LCD_voidSetCursorPosition+0x30>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	31 f0       	breq	.+12     	; 0x21e6 <LCD_voidSetCursorPosition+0x3a>
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <LCD_voidSetCursorPosition+0x42>
	  {
		  case LCD_LINE1 : { LCD_voidWriteCommand(LCD_DDRAM_ADD1+ Copy_u8Position -1); } break;
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	81 58       	subi	r24, 0x81	; 129
    21e0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <LCD_voidSetCursorPosition+0x42>
		  case LCD_LINE2 : { LCD_voidWriteCommand(LCD_DDRAM_ADD2+ Copy_u8Position -1); } break;
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	81 54       	subi	r24, 0x41	; 65
    21ea:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

	  }/*end of line switch case*/

  }/*end of LCD_voidSetCursorPosition()*/
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_voidDisplayChar>:
  * Description : Output character to current cursor position
  * Arguments   : Char_Data : Character to be displayed a number (0-9) or a character
  * return      : void
  */
  void LCD_voidDisplayChar(u8 Copy_u8CharData)
  {
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
	  /*check character type*/
	  if( (Copy_u8CharData >= 0) && (Copy_u8CharData < 10) )
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	8a 30       	cpi	r24, 0x0A	; 10
    220c:	28 f4       	brcc	.+10     	; 0x2218 <LCD_voidDisplayChar+0x1c>
	  {
		  /*if character is number*/
		  LCD_voidWriteData((Copy_u8CharData+'0'));
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	80 5d       	subi	r24, 0xD0	; 208
    2212:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_voidWriteData>
    2216:	03 c0       	rjmp	.+6      	; 0x221e <LCD_voidDisplayChar+0x22>

	  }
	  else
	  {
		  /*if character is char*/
		  LCD_voidWriteData(Copy_u8CharData);
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_voidWriteData>

	  }/*end of character type check*/


  }/*end of LCD_voidDisplayChar*/
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <LCD_voidDisplayString>:
  *               - u8 character string
  *			      Data type: LCD_NUMBER or LCD_STRING
  * return      : void
  */
  void LCD_voidDisplayString(char  *Copy_u32StringDataPtr)
  {
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <LCD_voidDisplayString+0x6>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
	  u8 count=0;
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <LCD_voidDisplayString+0x30>
		//while you don't reach to the end of your string enter the loop
		while(( Copy_u32StringDataPtr[count])!='\0')
		{
			//print the selected char
			LCD_voidDisplayChar(Copy_u32StringDataPtr[count]);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	fc 01       	movw	r30, r24
    2246:	e2 0f       	add	r30, r18
    2248:	f3 1f       	adc	r31, r19
    224a:	80 81       	ld	r24, Z
    224c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_voidDisplayChar>
			//increment to print the next char
			count++;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	89 83       	std	Y+1, r24	; 0x01
  */
  void LCD_voidDisplayString(char  *Copy_u32StringDataPtr)
  {
	  u8 count=0;
		//while you don't reach to the end of your string enter the loop
		while(( Copy_u32StringDataPtr[count])!='\0')
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	fc 01       	movw	r30, r24
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	80 81       	ld	r24, Z
    2268:	88 23       	and	r24, r24
    226a:	39 f7       	brne	.-50     	; 0x223a <LCD_voidDisplayString+0x14>
			//print the selected char
			LCD_voidDisplayChar(Copy_u32StringDataPtr[count]);
			//increment to print the next char
			count++;
		}
  }
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <LCD_voidShiftRight>:
  * Description : Shift all display right one step
  * Arguments   : void
  * return      : void
  */
  void LCD_voidShiftRight(void)
  {
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	  /*send shift right instruction*/
	  LCD_voidWriteCommand(LCD_DISP_SHIFT_RIGHT);
    2280:	8c e1       	ldi	r24, 0x1C	; 28
    2282:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

  }/*end of LCD_voidShiftRight()*/
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <LCD_voidShiftLeft>:
  * Description : Shift all display left one step
  * Arguments   : void
  * return      : void
  */
  void LCD_voidShiftLeft(void)
  {
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	 /*send shift left instruction*/
	 LCD_voidWriteCommand(LCD_DISP_SHIFT_LEFT);
    2294:	88 e1       	ldi	r24, 0x18	; 24
    2296:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

  }/*end of LCD_voidShiftLeft()*/
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <LCD_voidCursorShiftRight>:
  * Description : shift cursor position number of steps right
  * Arguments   : Number of Steps
  * return      : void
  */
  void LCD_voidCursorShiftRight(u8 Copy_u8Steps)
  {
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <LCD_voidCursorShiftRight+0x6>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	8a 83       	std	Y+2, r24	; 0x02
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    22ac:	19 82       	std	Y+1, r1	; 0x01
    22ae:	06 c0       	rjmp	.+12     	; 0x22bc <LCD_voidCursorShiftRight+0x1c>
	  {
		  /*Shift cursor one step right instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_RIGHT);
    22b0:	84 e1       	ldi	r24, 0x14	; 20
    22b2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
  * return      : void
  */
  void LCD_voidCursorShiftRight(u8 Copy_u8Steps)
  {
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	99 81       	ldd	r25, Y+1	; 0x01
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	98 17       	cp	r25, r24
    22c2:	b0 f3       	brcs	.-20     	; 0x22b0 <LCD_voidCursorShiftRight+0x10>
		  /*Shift cursor one step right instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_RIGHT);

	  }/*end of steps for loop*/

  }/*end of LCD_voidCursorShiftRight()*/
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LCD_voidCursorShiftLeft>:
  * Description : shift cursor position number of steps Left
  * Arguments   : Number of Steps
  * return      : void
  */
  void LCD_voidCursorShiftLeft(u8 Copy_u8Steps)
  {
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <LCD_voidCursorShiftLeft+0x6>
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	8a 83       	std	Y+2, r24	; 0x02
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    22da:	19 82       	std	Y+1, r1	; 0x01
    22dc:	06 c0       	rjmp	.+12     	; 0x22ea <LCD_voidCursorShiftLeft+0x1c>
	  {
		  /*Shift cursor one step Left instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_LEFT);
    22de:	80 e1       	ldi	r24, 0x10	; 16
    22e0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
  * return      : void
  */
  void LCD_voidCursorShiftLeft(u8 Copy_u8Steps)
  {
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	99 81       	ldd	r25, Y+1	; 0x01
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	98 17       	cp	r25, r24
    22f0:	b0 f3       	brcs	.-20     	; 0x22de <LCD_voidCursorShiftLeft+0x10>
		  /*Shift cursor one step Left instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_LEFT);

	  }/*end of steps for loop*/

  }/*end of LCD_voidCursorShiftLeft()*/
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <LCD_voidCursorDisplayOnOff>:
  * Description : set cursor display on and off
  * Arguments   : Status : LCD_ON or LCD_OFF
  * return      : void
  */
  void LCD_voidCursorDisplayOnOff(u8 Copy_u8Status)
  {
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Display status value (on or off)*/
	  SET_BIT_VALUE(DisplayAndCursorCommand,LCD_CURSOR_BIT,Copy_u8Status);
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	88 23       	and	r24, r24
    230c:	31 f4       	brne	.+12     	; 0x231a <LCD_voidCursorDisplayOnOff+0x1e>
    230e:	80 91 24 02 	lds	r24, 0x0224
    2312:	8d 7f       	andi	r24, 0xFD	; 253
    2314:	80 93 24 02 	sts	0x0224, r24
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <LCD_voidCursorDisplayOnOff+0x28>
    231a:	80 91 24 02 	lds	r24, 0x0224
    231e:	82 60       	ori	r24, 0x02	; 2
    2320:	80 93 24 02 	sts	0x0224, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    2324:	80 91 24 02 	lds	r24, 0x0224
    2328:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

  }/*end of LCD_voidCursorDisplayOnOff()*/
    232c:	0f 90       	pop	r0
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <LCD_voidCursorBlinkOnOff>:
  * Description : set cursor blinking on and off
  * Arguments   : Status : LCD_ON or LCD_OFF
  * return      : void
  */
  void LCD_voidCursorBlinkOnOff(u8 Copy_u8Status)
  {
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Cursor status value (on or off)*/
	  SET_BIT_VALUE(DisplayAndCursorCommand,LCD_BLINK_BIT,Copy_u8Status);
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	88 23       	and	r24, r24
    2344:	31 f4       	brne	.+12     	; 0x2352 <LCD_voidCursorBlinkOnOff+0x1e>
    2346:	80 91 24 02 	lds	r24, 0x0224
    234a:	8e 7f       	andi	r24, 0xFE	; 254
    234c:	80 93 24 02 	sts	0x0224, r24
    2350:	05 c0       	rjmp	.+10     	; 0x235c <LCD_voidCursorBlinkOnOff+0x28>
    2352:	80 91 24 02 	lds	r24, 0x0224
    2356:	81 60       	ori	r24, 0x01	; 1
    2358:	80 93 24 02 	sts	0x0224, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    235c:	80 91 24 02 	lds	r24, 0x0224
    2360:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>

  }/*end of LCD_voidCursorBlinkOnOff()*/
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LCD_voidScreenDisplayOnOff>:
  * Description : set Whole display on & off
  * Arguments   : Status : LCD_ON or LCD_OFF
  * return      : void
  */
  void LCD_voidScreenDisplayOnOff(u8 Copy_u8Status)
  {
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	0f 92       	push	r0
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Display status value (on or off)*/
	  SET_BIT_VALUE(DisplayAndCursorCommand,LCD_DISP_BIT,Copy_u8Status);
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	88 23       	and	r24, r24
    237c:	31 f4       	brne	.+12     	; 0x238a <LCD_voidScreenDisplayOnOff+0x1e>
    237e:	80 91 24 02 	lds	r24, 0x0224
    2382:	8b 7f       	andi	r24, 0xFB	; 251
    2384:	80 93 24 02 	sts	0x0224, r24
    2388:	05 c0       	rjmp	.+10     	; 0x2394 <LCD_voidScreenDisplayOnOff+0x28>
    238a:	80 91 24 02 	lds	r24, 0x0224
    238e:	84 60       	ori	r24, 0x04	; 4
    2390:	80 93 24 02 	sts	0x0224, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    2394:	80 91 24 02 	lds	r24, 0x0224
    2398:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidWriteCommand>
	  
  }/*end of LCD_voidDisplayOnOff()*/
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_voidDisplayCustomChar>:
  * Description : use custom character from CGRAM
  * Arguments   : slot number : from (LCD_CUST_CHAR_1, LCD_CUST_CHAR_2,...LCD_CUST_CHAR_8)
  * return      : void  
  */
  void LCD_voidDisplayCustomChar(u8 Copy_SlotNumber)
  {
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
	  /*slot in range check*/
	  if ( (Copy_SlotNumber >= 0) && (Copy_SlotNumber<8) )
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	88 30       	cpi	r24, 0x08	; 8
    23b4:	18 f4       	brcc	.+6      	; 0x23bc <LCD_voidDisplayCustomChar+0x18>
	  {
		  /*Display Custom character in that slot*/
		  LCD_voidWriteData(Copy_SlotNumber);
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_voidWriteData>
		
	  }/*end of slot number range check*/
	  
  }/*end of LCD_voidDisplayCustomChar()*/
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <KPAD_voidInitializeKeypad>:
#include "KPAD_Interface.h"
#include <avr/delay.h>


 void KPAD_voidInitializeKeypad(void)
 {
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	0f 92       	push	r0
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
    23ce:	19 82       	std	Y+1, r1	; 0x01
    23d0:	27 c0       	rjmp	.+78     	; 0x2420 <KPAD_voidInitializeKeypad+0x5c>
	 {
	 	 /*set column current bit in ColumnArray[] OUTPUT*/
		 DIO_VoidSetPinDirection(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_OUTPUT_PIN);
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	ea 5d       	subi	r30, 0xDA	; 218
    23dc:	fd 4f       	sbci	r31, 0xFD	; 253
    23de:	90 81       	ld	r25, Z
    23e0:	83 e0       	ldi	r24, 0x03	; 3
    23e2:	69 2f       	mov	r22, r25
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_VoidSetPinDirection>
	
		 /*set current bit in RowArray[] INPUT*/
		 DIO_VoidSetPinDirection(KEYPAD_PORT,KPAD_u8RowArray[i],DIO_INPUT_PIN);
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	fc 01       	movw	r30, r24
    23f2:	e6 5d       	subi	r30, 0xD6	; 214
    23f4:	fd 4f       	sbci	r31, 0xFD	; 253
    23f6:	90 81       	ld	r25, Z
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	69 2f       	mov	r22, r25
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_VoidSetPinDirection>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8RowArray[i],DIO_HIGH);
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	fc 01       	movw	r30, r24
    240a:	e6 5d       	subi	r30, 0xD6	; 214
    240c:	fd 4f       	sbci	r31, 0xFD	; 253
    240e:	90 81       	ld	r25, Z
    2410:	83 e0       	ldi	r24, 0x03	; 3
    2412:	69 2f       	mov	r22, r25
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>

 void KPAD_voidInitializeKeypad(void)
 {
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	84 30       	cpi	r24, 0x04	; 4
    2424:	b0 f2       	brcs	.-84     	; 0x23d2 <KPAD_voidInitializeKeypad+0xe>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8RowArray[i],DIO_HIGH);
	 }/*end of for loop*/
	
 }
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <KPAD_u8GetPressedKey>:

u8 KPAD_u8GetPressedKey(void)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	00 d0       	rcall	.+0      	; 0x2434 <KPAD_u8GetPressedKey+0x6>
    2434:	00 d0       	rcall	.+0      	; 0x2436 <KPAD_u8GetPressedKey+0x8>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62

    /*for loop to set all column pins HIGH*/
    for (u8 i = 0; i<4 ;i++ )
    243a:	1b 82       	std	Y+3, r1	; 0x03
    243c:	0f c0       	rjmp	.+30     	; 0x245c <KPAD_u8GetPressedKey+0x2e>
    {
        /*set current pin in ColumnArray HIGH*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	fc 01       	movw	r30, r24
    2446:	ea 5d       	subi	r30, 0xDA	; 218
    2448:	fd 4f       	sbci	r31, 0xFD	; 253
    244a:	90 81       	ld	r25, Z
    244c:	83 e0       	ldi	r24, 0x03	; 3
    244e:	69 2f       	mov	r22, r25
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>

u8 KPAD_u8GetPressedKey(void)
{

    /*for loop to set all column pins HIGH*/
    for (u8 i = 0; i<4 ;i++ )
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	8b 83       	std	Y+3, r24	; 0x03
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	84 30       	cpi	r24, 0x04	; 4
    2460:	70 f3       	brcs	.-36     	; 0x243e <KPAD_u8GetPressedKey+0x10>
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);

    }/*end of for loop*/

    /*for loop to scan all keypad columns*/
    for (u8 i = 0 ; i<4 ; i++)
    2462:	1a 82       	std	Y+2, r1	; 0x02
    2464:	43 c0       	rjmp	.+134    	; 0x24ec <KPAD_u8GetPressedKey+0xbe>
    {
        /*set current column pin low to test all row pins to find out which button has been pressed*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_LOW);
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	fc 01       	movw	r30, r24
    246e:	ea 5d       	subi	r30, 0xDA	; 218
    2470:	fd 4f       	sbci	r31, 0xFD	; 253
    2472:	90 81       	ld	r25, Z
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	69 2f       	mov	r22, r25
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>

        /*for loop to scan and test all keypad row pins*/
        for (u8 j = 0 ; j<4 ; j++)
    247e:	19 82       	std	Y+1, r1	; 0x01
    2480:	23 c0       	rjmp	.+70     	; 0x24c8 <KPAD_u8GetPressedKey+0x9a>
        {

            /*check current row pin value*/
            if ( DIO_LOW == DIO_U8GetPinValue(KEYPAD_PORT,KPAD_u8RowArray[j]) )
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	fc 01       	movw	r30, r24
    248a:	e6 5d       	subi	r30, 0xD6	; 214
    248c:	fd 4f       	sbci	r31, 0xFD	; 253
    248e:	90 81       	ld	r25, Z
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	69 2f       	mov	r22, r25
    2494:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <DIO_U8GetPinValue>
    2498:	88 23       	and	r24, r24
    249a:	99 f4       	brne	.+38     	; 0x24c2 <KPAD_u8GetPressedKey+0x94>
            {
                /*return pressed button value*/
                return KeyPadArr[j][i];
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	48 2f       	mov	r20, r24
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	ca 01       	movw	r24, r20
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	82 0f       	add	r24, r18
    24b4:	93 1f       	adc	r25, r19
    24b6:	fc 01       	movw	r30, r24
    24b8:	ee 59       	subi	r30, 0x9E	; 158
    24ba:	fb 4f       	sbci	r31, 0xFB	; 251
    24bc:	80 81       	ld	r24, Z
    24be:	8c 83       	std	Y+4, r24	; 0x04
    24c0:	1b c0       	rjmp	.+54     	; 0x24f8 <KPAD_u8GetPressedKey+0xca>
    {
        /*set current column pin low to test all row pins to find out which button has been pressed*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_LOW);

        /*for loop to scan and test all keypad row pins*/
        for (u8 j = 0 ; j<4 ; j++)
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	84 30       	cpi	r24, 0x04	; 4
    24cc:	d0 f2       	brcs	.-76     	; 0x2482 <KPAD_u8GetPressedKey+0x54>
                return KeyPadArr[j][i];
            }
        }/*end of for loop*/

        /*set current column pin HIGH again*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	fc 01       	movw	r30, r24
    24d6:	ea 5d       	subi	r30, 0xDA	; 218
    24d8:	fd 4f       	sbci	r31, 0xFD	; 253
    24da:	90 81       	ld	r25, Z
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	69 2f       	mov	r22, r25
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);

    }/*end of for loop*/

    /*for loop to scan all keypad columns*/
    for (u8 i = 0 ; i<4 ; i++)
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <KPAD_u8GetPressedKey+0xc6>
    24f2:	b9 cf       	rjmp	.-142    	; 0x2466 <KPAD_u8GetPressedKey+0x38>
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);

    }/*end of for loop*/

    /*Report no Button pressed*/
    return '?';
    24f4:	8f e3       	ldi	r24, 0x3F	; 63
    24f6:	8c 83       	std	Y+4, r24	; 0x04
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04

}/*end of HKPD_u8GetPressedKey()*/
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <H7SEG_VoidInit>:
#include "../../03_MCAL/DIO_Driver/DIO_Interface.h"
#include "H7SEG_Private.h"
#include "H7SEG_Interface.h"

void H7SEG_VoidInit(u8 Copy_U8Port)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	0f 92       	push	r0
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	89 83       	std	Y+1, r24	; 0x01

    DIO_VoidSetPortDirection(Copy_U8Port,DIO_OUTPUT_PORT);
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	6f ef       	ldi	r22, 0xFF	; 255
    2518:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_VoidSetPortDirection>
}
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <H7SEG_VoidDisplayNumber>:

void H7SEG_VoidDisplayNumber(u8 Copy_U8Port,u8 Copy_u8DisplayNumber)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <H7SEG_VoidDisplayNumber+0x6>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	6a 83       	std	Y+2, r22	; 0x02

    DIO_VoidSetPortValue(Copy_U8Port,H7SEG_u8SevenSegArray[Copy_u8DisplayNumber]);
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	fc 01       	movw	r30, r24
    253a:	ee 58       	subi	r30, 0x8E	; 142
    253c:	fb 4f       	sbci	r31, 0xFB	; 251
    253e:	90 81       	ld	r25, Z
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	69 2f       	mov	r22, r25
    2544:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_VoidSetPortValue>

}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <main>:
void stopBuzzer(void);                           //Buzzer Stop Function
u8 checkUser(u8* userName, u8 *userPass);        // Function To Check if the logged user was saved is system or not


int main(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    PORT_VoidInit();                                  // Initialize input output port
    255a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <PORT_VoidInit>
    UART_voidInitUART();                           // Initialize UART
    255e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInitUART>
    GIE_VoidEnable();                               // Initialize  Global Interrupt Enable
    2562:	0e 94 a4 06 	call	0xd48	; 0xd48 <GIE_VoidEnable>
	UART_u8SetRXCallBack(&Uart_rx_int);           // Set Call Back Func of UART
    2566:	84 ef       	ldi	r24, 0xF4	; 244
    2568:	93 e1       	ldi	r25, 0x13	; 19
    256a:	0e 94 36 06 	call	0xc6c	; 0xc6c <UART_u8SetRXCallBack>
    EXTI_VoidINTInit(INT0);                      // Initialize Interrupt zero
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	0e 94 c0 06 	call	0xd80	; 0xd80 <EXTI_VoidINTInit>
    EXTI_VoidINTSetCallBackFunc(INT0,stopBuzzer);        // Set Call Back Func of INT0
    2574:	2c ef       	ldi	r18, 0xFC	; 252
    2576:	35 e1       	ldi	r19, 0x15	; 21
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	b9 01       	movw	r22, r18
    257c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <EXTI_VoidINTSetCallBackFunc>

    UART_VoidSendString("====== Welcome in Your Smart Home App ======\n");
    2580:	80 e6       	ldi	r24, 0x60	; 96
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
    logInFun();         // Log in function
    2588:	0e 94 c7 12 	call	0x258e	; 0x258e <logInFun>
    258c:	ff cf       	rjmp	.-2      	; 0x258c <main+0x3a>

0000258e <logInFun>:
    }
    return 0;
}

void logInFun(void)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	e6 97       	sbiw	r28, 0x36	; 54
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
	GIE_VoidDisable();
    25a2:	0e 94 b2 06 	call	0xd64	; 0xd64 <GIE_VoidDisable>
	UART_VoidSendString("Please Enter your Name\n");
    25a6:	8e e8       	ldi	r24, 0x8E	; 142
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
    u8 nameCounter=0;
    25ae:	1c 82       	std	Y+4, r1	; 0x04
    u8 passCounter=0;
    25b0:	1b 82       	std	Y+3, r1	; 0x03
    u8 userName[25];
    u8 userPass[25];
    u8 readChar='?';
    25b2:	8f e3       	ldi	r24, 0x3F	; 63
    25b4:	8a 83       	std	Y+2, r24	; 0x02
    25b6:	1c c0       	rjmp	.+56     	; 0x25f0 <logInFun+0x62>
	    while (readChar!=59)  // Read Char till ;  as end of string
	    {
	        readChar = UART_U8ReceiveData();
    25b8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_U8ReceiveData>
    25bc:	8a 83       	std	Y+2, r24	; 0x02
	    	if(readChar>=25 &&readChar<=200 &&readChar!=59)
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	89 31       	cpi	r24, 0x19	; 25
    25c2:	b0 f0       	brcs	.+44     	; 0x25f0 <logInFun+0x62>
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	89 3c       	cpi	r24, 0xC9	; 201
    25c8:	98 f4       	brcc	.+38     	; 0x25f0 <logInFun+0x62>
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	8b 33       	cpi	r24, 0x3B	; 59
    25ce:	81 f0       	breq	.+32     	; 0x25f0 <logInFun+0x62>
	    	{
                userName[nameCounter]=readChar;
    25d0:	8c 81       	ldd	r24, Y+4	; 0x04
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	ce 01       	movw	r24, r28
    25d8:	05 96       	adiw	r24, 0x05	; 5
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	80 83       	st	Z, r24
                nameCounter++;
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	8c 83       	std	Y+4, r24	; 0x04
                UART_voidSendData(readChar);
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <UART_voidSendData>
    u8 nameCounter=0;
    u8 passCounter=0;
    u8 userName[25];
    u8 userPass[25];
    u8 readChar='?';
	    while (readChar!=59)  // Read Char till ;  as end of string
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	8b 33       	cpi	r24, 0x3B	; 59
    25f4:	09 f7       	brne	.-62     	; 0x25b8 <logInFun+0x2a>
                nameCounter++;
                UART_voidSendData(readChar);
	    	}

	    }
    userName[nameCounter]='\0';
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	ce 01       	movw	r24, r28
    25fe:	05 96       	adiw	r24, 0x05	; 5
    2600:	fc 01       	movw	r30, r24
    2602:	e2 0f       	add	r30, r18
    2604:	f3 1f       	adc	r31, r19
    2606:	10 82       	st	Z, r1
    UART_VoidSendString("\nName was Entered \n");
    2608:	86 ea       	ldi	r24, 0xA6	; 166
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>


    UART_VoidSendString("Please Enter your Pass\n");
    2610:	8a eb       	ldi	r24, 0xBA	; 186
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
     readChar='?';
    2618:	8f e3       	ldi	r24, 0x3F	; 63
    261a:	8a 83       	std	Y+2, r24	; 0x02
    261c:	1c c0       	rjmp	.+56     	; 0x2656 <logInFun+0xc8>
    while (readChar!=59)    // Read Char till ;  as end of string
    {
        readChar = UART_U8ReceiveData();
    261e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_U8ReceiveData>
    2622:	8a 83       	std	Y+2, r24	; 0x02
        if(readChar>=25 &&readChar<=200 &&readChar!=59)
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	89 31       	cpi	r24, 0x19	; 25
    2628:	b0 f0       	brcs	.+44     	; 0x2656 <logInFun+0xc8>
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	89 3c       	cpi	r24, 0xC9	; 201
    262e:	98 f4       	brcc	.+38     	; 0x2656 <logInFun+0xc8>
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	8b 33       	cpi	r24, 0x3B	; 59
    2634:	81 f0       	breq	.+32     	; 0x2656 <logInFun+0xc8>
        {
            userPass[passCounter]=readChar;
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	ce 01       	movw	r24, r28
    263e:	4e 96       	adiw	r24, 0x1e	; 30
    2640:	fc 01       	movw	r30, r24
    2642:	e2 0f       	add	r30, r18
    2644:	f3 1f       	adc	r31, r19
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	80 83       	st	Z, r24
            passCounter++;
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	8b 83       	std	Y+3, r24	; 0x03
            UART_voidSendData(readChar);
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <UART_voidSendData>
    UART_VoidSendString("\nName was Entered \n");


    UART_VoidSendString("Please Enter your Pass\n");
     readChar='?';
    while (readChar!=59)    // Read Char till ;  as end of string
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	8b 33       	cpi	r24, 0x3B	; 59
    265a:	09 f7       	brne	.-62     	; 0x261e <logInFun+0x90>
            passCounter++;
            UART_voidSendData(readChar);
        }

    }
    userPass[passCounter]='\0';
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	ce 01       	movw	r24, r28
    2664:	4e 96       	adiw	r24, 0x1e	; 30
    2666:	fc 01       	movw	r30, r24
    2668:	e2 0f       	add	r30, r18
    266a:	f3 1f       	adc	r31, r19
    266c:	10 82       	st	Z, r1
    UART_VoidSendString("\nPass was Entered \n");
    266e:	82 ed       	ldi	r24, 0xD2	; 210
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>


  u8 returnedValue=  checkUser(userName,userPass);
    2676:	ce 01       	movw	r24, r28
    2678:	05 96       	adiw	r24, 0x05	; 5
    267a:	9e 01       	movw	r18, r28
    267c:	22 5e       	subi	r18, 0xE2	; 226
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	b9 01       	movw	r22, r18
    2682:	0e 94 83 13 	call	0x2706	; 0x2706 <checkUser>
    2686:	89 83       	std	Y+1, r24	; 0x01

  if(returnedValue==1)
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	69 f5       	brne	.+90     	; 0x26e8 <logInFun+0x15a>
  {
      numberOfErrorTrials=0;
    268e:	10 92 85 04 	sts	0x0485, r1
	  GIE_VoidEnable();
    2692:	0e 94 a4 06 	call	0xd48	; 0xd48 <GIE_VoidEnable>
	  UART_VoidSendString("\n Welcome ");
    2696:	86 ee       	ldi	r24, 0xE6	; 230
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString(userName);
    269e:	ce 01       	movw	r24, r28
    26a0:	05 96       	adiw	r24, 0x05	; 5
    26a2:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString(" , You can now control your Room \n");
    26a6:	81 ef       	ldi	r24, 0xF1	; 241
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>

      UART_VoidSendString("=============================\n");
    26ae:	84 e1       	ldi	r24, 0x14	; 20
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString("Press \'n\' ==> To Led On\n");
    26b6:	83 e3       	ldi	r24, 0x33	; 51
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString("Press \'f\' ==> To Led Off\n");
    26be:	8c e4       	ldi	r24, 0x4C	; 76
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString("Press \'r\' ==> To Open Door\n");
    26c6:	86 e6       	ldi	r24, 0x66	; 102
    26c8:	91 e0       	ldi	r25, 0x01	; 1
    26ca:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString("Press \'l\' ==> To Close Door\n");
    26ce:	82 e8       	ldi	r24, 0x82	; 130
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString("Press \'0\' ==> To Sign Out\n");
    26d6:	8f e9       	ldi	r24, 0x9F	; 159
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
      UART_VoidSendString("=============================\n");
    26de:	84 e1       	ldi	r24, 0x14	; 20
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <logInFun+0x166>
  }
  else
  {
      UART_VoidSendString("Log in Failed\n\n");
    26e8:	8a eb       	ldi	r24, 0xBA	; 186
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
	  logInFun();
    26f0:	0e 94 c7 12 	call	0x258e	; 0x258e <logInFun>
  }


}
    26f4:	e6 96       	adiw	r28, 0x36	; 54
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <checkUser>:


u8 checkUser(u8* userName, u8 *userPass)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	2b 97       	sbiw	r28, 0x0b	; 11
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	98 87       	std	Y+8, r25	; 0x08
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	7a 87       	std	Y+10, r23	; 0x0a
    2720:	69 87       	std	Y+9, r22	; 0x09

	numberOfErrorTrials++;
    2722:	80 91 85 04 	lds	r24, 0x0485
    2726:	8f 5f       	subi	r24, 0xFF	; 255
    2728:	80 93 85 04 	sts	0x0485, r24
	if(numberOfErrorTrials<3)
    272c:	80 91 85 04 	lds	r24, 0x0485
    2730:	83 30       	cpi	r24, 0x03	; 3
    2732:	08 f0       	brcs	.+2      	; 0x2736 <checkUser+0x30>
    2734:	46 c0       	rjmp	.+140    	; 0x27c2 <checkUser+0xbc>
        {
        for (int i = 0; i < 10; i++)
    2736:	1e 82       	std	Y+6, r1	; 0x06
    2738:	1d 82       	std	Y+5, r1	; 0x05
    273a:	3b c0       	rjmp	.+118    	; 0x27b2 <checkUser+0xac>
            {
                int resultName = strcmp(array[i].name, userName);
    273c:	2d 81       	ldd	r18, Y+5	; 0x05
    273e:	3e 81       	ldd	r19, Y+6	; 0x06
    2740:	82 e3       	ldi	r24, 0x32	; 50
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	ac 01       	movw	r20, r24
    2746:	24 9f       	mul	r18, r20
    2748:	c0 01       	movw	r24, r0
    274a:	25 9f       	mul	r18, r21
    274c:	90 0d       	add	r25, r0
    274e:	34 9f       	mul	r19, r20
    2750:	90 0d       	add	r25, r0
    2752:	11 24       	eor	r1, r1
    2754:	82 5d       	subi	r24, 0xD2	; 210
    2756:	9d 4f       	sbci	r25, 0xFD	; 253
    2758:	2f 81       	ldd	r18, Y+7	; 0x07
    275a:	38 85       	ldd	r19, Y+8	; 0x08
    275c:	b9 01       	movw	r22, r18
    275e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <strcmp>
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
                int resultPass = strcmp(array[i].password, userPass);
    2766:	2d 81       	ldd	r18, Y+5	; 0x05
    2768:	3e 81       	ldd	r19, Y+6	; 0x06
    276a:	82 e3       	ldi	r24, 0x32	; 50
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	ac 01       	movw	r20, r24
    2770:	24 9f       	mul	r18, r20
    2772:	c0 01       	movw	r24, r0
    2774:	25 9f       	mul	r18, r21
    2776:	90 0d       	add	r25, r0
    2778:	34 9f       	mul	r19, r20
    277a:	90 0d       	add	r25, r0
    277c:	11 24       	eor	r1, r1
    277e:	49 96       	adiw	r24, 0x19	; 25
    2780:	82 5d       	subi	r24, 0xD2	; 210
    2782:	9d 4f       	sbci	r25, 0xFD	; 253
    2784:	29 85       	ldd	r18, Y+9	; 0x09
    2786:	3a 85       	ldd	r19, Y+10	; 0x0a
    2788:	b9 01       	movw	r22, r18
    278a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <strcmp>
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01

                if ( resultName == 0 && resultPass==0)
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	39 f4       	brne	.+14     	; 0x27a8 <checkUser+0xa2>
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	19 f4       	brne	.+6      	; 0x27a8 <checkUser+0xa2>
                {
                   return 1;
    27a2:	51 e0       	ldi	r21, 0x01	; 1
    27a4:	5b 87       	std	Y+11, r21	; 0x0b
    27a6:	16 c0       	rjmp	.+44     	; 0x27d4 <checkUser+0xce>
{

	numberOfErrorTrials++;
	if(numberOfErrorTrials<3)
        {
        for (int i = 0; i < 10; i++)
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	8a 30       	cpi	r24, 0x0A	; 10
    27b8:	91 05       	cpc	r25, r1
    27ba:	0c f4       	brge	.+2      	; 0x27be <checkUser+0xb8>
    27bc:	bf cf       	rjmp	.-130    	; 0x273c <checkUser+0x36>
                if ( resultName == 0 && resultPass==0)
                {
                   return 1;
                }
            }
        return 0;
    27be:	1b 86       	std	Y+11, r1	; 0x0b
    27c0:	09 c0       	rjmp	.+18     	; 0x27d4 <checkUser+0xce>
        }
	else
        {
		  UART_VoidSendString("Buzzer sound \n");
    27c2:	8a ec       	ldi	r24, 0xCA	; 202
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
            buzzerAlarm();
    27ca:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <buzzerAlarm>
            numberOfErrorTrials=0;
    27ce:	10 92 85 04 	sts	0x0485, r1
            return 0;
    27d2:	1b 86       	std	Y+11, r1	; 0x0b
    27d4:	8b 85       	ldd	r24, Y+11	; 0x0b
        }

}
    27d6:	2b 96       	adiw	r28, 0x0b	; 11
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <Uart_rx_int>:

void Uart_rx_int(void)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	6d 97       	sbiw	r28, 0x1d	; 29
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
	u8 	ReadedData = UART_U8ReceiveData();
    27fc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_U8ReceiveData>
    2800:	8d 8f       	std	Y+29, r24	; 0x1d
	if(ReadedData>=48 &&ReadedData<=200 && buzzerIsSounding==0)
    2802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2804:	80 33       	cpi	r24, 0x30	; 48
    2806:	08 f4       	brcc	.+2      	; 0x280a <Uart_rx_int+0x22>
    2808:	56 c1       	rjmp	.+684    	; 0x2ab6 <Uart_rx_int+0x2ce>
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	89 3c       	cpi	r24, 0xC9	; 201
    280e:	08 f0       	brcs	.+2      	; 0x2812 <Uart_rx_int+0x2a>
    2810:	52 c1       	rjmp	.+676    	; 0x2ab6 <Uart_rx_int+0x2ce>
    2812:	80 91 86 04 	lds	r24, 0x0486
    2816:	88 23       	and	r24, r24
    2818:	09 f0       	breq	.+2      	; 0x281c <Uart_rx_int+0x34>
    281a:	4d c1       	rjmp	.+666    	; 0x2ab6 <Uart_rx_int+0x2ce>
	{
		if(ReadedData=='n') //LED ON
    281c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281e:	8e 36       	cpi	r24, 0x6E	; 110
    2820:	a1 f4       	brne	.+40     	; 0x284a <Uart_rx_int+0x62>
		{
            UART_VoidSendString("LED ON\n");
    2822:	89 ed       	ldi	r24, 0xD9	; 217
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
			DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	62 e0       	ldi	r22, 0x02	; 2
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	63 e0       	ldi	r22, 0x03	; 3
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    2848:	36 c1       	rjmp	.+620    	; 0x2ab6 <Uart_rx_int+0x2ce>

		}
		else if(ReadedData=='f') //LED OFF
    284a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284c:	86 36       	cpi	r24, 0x66	; 102
    284e:	a1 f4       	brne	.+40     	; 0x2878 <Uart_rx_int+0x90>
		{
            UART_VoidSendString("LED OFF\n");
    2850:	81 ee       	ldi	r24, 0xE1	; 225
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
			DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN1, DIO_LOW);
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	61 e0       	ldi	r22, 0x01	; 1
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN2, DIO_LOW);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	62 e0       	ldi	r22, 0x02	; 2
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN3, DIO_LOW);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	63 e0       	ldi	r22, 0x03	; 3
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    2876:	1f c1       	rjmp	.+574    	; 0x2ab6 <Uart_rx_int+0x2ce>
		}
        else if(ReadedData=='r') //OPEN DOOR
    2878:	8d 8d       	ldd	r24, Y+29	; 0x1d
    287a:	82 37       	cpi	r24, 0x72	; 114
    287c:	09 f0       	breq	.+2      	; 0x2880 <Uart_rx_int+0x98>
    287e:	86 c0       	rjmp	.+268    	; 0x298c <Uart_rx_int+0x1a4>
        {
            UART_VoidSendString("Opening door\n");
    2880:	8a ee       	ldi	r24, 0xEA	; 234
    2882:	91 e0       	ldi	r25, 0x01	; 1
    2884:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
            DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_LOW);
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	64 e0       	ldi	r22, 0x04	; 4
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
            DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	65 e0       	ldi	r22, 0x05	; 5
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e4       	ldi	r25, 0x40	; 64
    28a0:	ac e1       	ldi	r26, 0x1C	; 28
    28a2:	b5 e4       	ldi	r27, 0x45	; 69
    28a4:	89 8f       	std	Y+25, r24	; 0x19
    28a6:	9a 8f       	std	Y+26, r25	; 0x1a
    28a8:	ab 8f       	std	Y+27, r26	; 0x1b
    28aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	69 8d       	ldd	r22, Y+25	; 0x19
    28ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a ef       	ldi	r20, 0xFA	; 250
    28ba:	54 e4       	ldi	r21, 0x44	; 68
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8d 8b       	std	Y+21, r24	; 0x15
    28c6:	9e 8b       	std	Y+22, r25	; 0x16
    28c8:	af 8b       	std	Y+23, r26	; 0x17
    28ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28cc:	6d 89       	ldd	r22, Y+21	; 0x15
    28ce:	7e 89       	ldd	r23, Y+22	; 0x16
    28d0:	8f 89       	ldd	r24, Y+23	; 0x17
    28d2:	98 8d       	ldd	r25, Y+24	; 0x18
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <Uart_rx_int+0x106>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <Uart_rx_int+0x184>
	else if (__tmp > 65535)
    28ee:	6d 89       	ldd	r22, Y+21	; 0x15
    28f0:	7e 89       	ldd	r23, Y+22	; 0x16
    28f2:	8f 89       	ldd	r24, Y+23	; 0x17
    28f4:	98 8d       	ldd	r25, Y+24	; 0x18
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <Uart_rx_int+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	69 8d       	ldd	r22, Y+25	; 0x19
    2908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9c 8b       	std	Y+20, r25	; 0x14
    292c:	8b 8b       	std	Y+19, r24	; 0x13
    292e:	0f c0       	rjmp	.+30     	; 0x294e <Uart_rx_int+0x166>
    2930:	88 ec       	ldi	r24, 0xC8	; 200
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9a 8b       	std	Y+18, r25	; 0x12
    2936:	89 8b       	std	Y+17, r24	; 0x11
    2938:	89 89       	ldd	r24, Y+17	; 0x11
    293a:	9a 89       	ldd	r25, Y+18	; 0x12
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <Uart_rx_int+0x154>
    2940:	9a 8b       	std	Y+18, r25	; 0x12
    2942:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8b 89       	ldd	r24, Y+19	; 0x13
    2946:	9c 89       	ldd	r25, Y+20	; 0x14
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <Uart_rx_int+0x148>
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <Uart_rx_int+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	6d 89       	ldd	r22, Y+21	; 0x15
    295a:	7e 89       	ldd	r23, Y+22	; 0x16
    295c:	8f 89       	ldd	r24, Y+23	; 0x17
    295e:	98 8d       	ldd	r25, Y+24	; 0x18
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9c 8b       	std	Y+20, r25	; 0x14
    296a:	8b 8b       	std	Y+19, r24	; 0x13
    296c:	8b 89       	ldd	r24, Y+19	; 0x13
    296e:	9c 89       	ldd	r25, Y+20	; 0x14
    2970:	98 8b       	std	Y+16, r25	; 0x10
    2972:	8f 87       	std	Y+15, r24	; 0x0f
    2974:	8f 85       	ldd	r24, Y+15	; 0x0f
    2976:	98 89       	ldd	r25, Y+16	; 0x10
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <Uart_rx_int+0x190>
    297c:	98 8b       	std	Y+16, r25	; 0x10
    297e:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(2500);
            DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN5, DIO_LOW);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	65 e0       	ldi	r22, 0x05	; 5
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    298a:	95 c0       	rjmp	.+298    	; 0x2ab6 <Uart_rx_int+0x2ce>
        }
        else if(ReadedData=='l') //CLOSE DOOR
    298c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    298e:	8c 36       	cpi	r24, 0x6C	; 108
    2990:	09 f0       	breq	.+2      	; 0x2994 <Uart_rx_int+0x1ac>
    2992:	86 c0       	rjmp	.+268    	; 0x2aa0 <Uart_rx_int+0x2b8>
        {
            UART_VoidSendString("closing door\n");
    2994:	88 ef       	ldi	r24, 0xF8	; 248
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
            DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	64 e0       	ldi	r22, 0x04	; 4
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
            DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN5, DIO_LOW);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	65 e0       	ldi	r22, 0x05	; 5
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e4       	ldi	r25, 0x40	; 64
    29b4:	ac e1       	ldi	r26, 0x1C	; 28
    29b6:	b5 e4       	ldi	r27, 0x45	; 69
    29b8:	8b 87       	std	Y+11, r24	; 0x0b
    29ba:	9c 87       	std	Y+12, r25	; 0x0c
    29bc:	ad 87       	std	Y+13, r26	; 0x0d
    29be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a ef       	ldi	r20, 0xFA	; 250
    29ce:	54 e4       	ldi	r21, 0x44	; 68
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	8f 83       	std	Y+7, r24	; 0x07
    29da:	98 87       	std	Y+8, r25	; 0x08
    29dc:	a9 87       	std	Y+9, r26	; 0x09
    29de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e0:	6f 81       	ldd	r22, Y+7	; 0x07
    29e2:	78 85       	ldd	r23, Y+8	; 0x08
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	2c f4       	brge	.+10     	; 0x2a02 <Uart_rx_int+0x21a>
		__ticks = 1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	3f c0       	rjmp	.+126    	; 0x2a80 <Uart_rx_int+0x298>
	else if (__tmp > 65535)
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	4c f5       	brge	.+82     	; 0x2a6c <Uart_rx_int+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
    2a42:	0f c0       	rjmp	.+30     	; 0x2a62 <Uart_rx_int+0x27a>
    2a44:	88 ec       	ldi	r24, 0xC8	; 200
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	9c 83       	std	Y+4, r25	; 0x04
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <Uart_rx_int+0x268>
    2a54:	9c 83       	std	Y+4, r25	; 0x04
    2a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <Uart_rx_int+0x25c>
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <Uart_rx_int+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6e:	78 85       	ldd	r23, Y+8	; 0x08
    2a70:	89 85       	ldd	r24, Y+9	; 0x09
    2a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <Uart_rx_int+0x2a4>
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(2500);
            DIO_VoidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_LOW);
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	64 e0       	ldi	r22, 0x04	; 4
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    2a9e:	0b c0       	rjmp	.+22     	; 0x2ab6 <Uart_rx_int+0x2ce>

        }
		else if(ReadedData=='o')
    2aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa2:	8f 36       	cpi	r24, 0x6F	; 111
    2aa4:	41 f4       	brne	.+16     	; 0x2ab6 <Uart_rx_int+0x2ce>
        {
			UART_VoidSendString("Log out Successfully\n");
    2aa6:	86 e0       	ldi	r24, 0x06	; 6
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	0e 94 0b 06 	call	0xc16	; 0xc16 <UART_VoidSendString>
			numberOfErrorTrials=0;
    2aae:	10 92 85 04 	sts	0x0485, r1
            logInFun();
    2ab2:	0e 94 c7 12 	call	0x258e	; 0x258e <logInFun>
        }
	}
}
    2ab6:	6d 96       	adiw	r28, 0x1d	; 29
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <buzzerAlarm>:

void buzzerAlarm(void)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    GIE_VoidEnable();
    2adc:	0e 94 a4 06 	call	0xd48	; 0xd48 <GIE_VoidEnable>
    2ae0:	79 c0       	rjmp	.+242    	; 0x2bd4 <buzzerAlarm+0x10c>
    /// Time out
    while(isSwitchPressed==0)
    {
        DIO_VoidTogglePin(DIO_PORTB,DIO_PIN0);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	0e 94 6d 0b 	call	0x16da	; 0x16da <DIO_VoidTogglePin>
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	aa ef       	ldi	r26, 0xFA	; 250
    2af0:	b3 e4       	ldi	r27, 0x43	; 67
    2af2:	8b 87       	std	Y+11, r24	; 0x0b
    2af4:	9c 87       	std	Y+12, r25	; 0x0c
    2af6:	ad 87       	std	Y+13, r26	; 0x0d
    2af8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a ef       	ldi	r20, 0xFA	; 250
    2b08:	54 e4       	ldi	r21, 0x44	; 68
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8f 83       	std	Y+7, r24	; 0x07
    2b14:	98 87       	std	Y+8, r25	; 0x08
    2b16:	a9 87       	std	Y+9, r26	; 0x09
    2b18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1c:	78 85       	ldd	r23, Y+8	; 0x08
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e8       	ldi	r20, 0x80	; 128
    2b28:	5f e3       	ldi	r21, 0x3F	; 63
    2b2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2e:	88 23       	and	r24, r24
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <buzzerAlarm+0x74>
		__ticks = 1;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	3f c0       	rjmp	.+126    	; 0x2bba <buzzerAlarm+0xf2>
	else if (__tmp > 65535)
    2b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3e:	78 85       	ldd	r23, Y+8	; 0x08
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	3f ef       	ldi	r19, 0xFF	; 255
    2b48:	4f e7       	ldi	r20, 0x7F	; 127
    2b4a:	57 e4       	ldi	r21, 0x47	; 71
    2b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b50:	18 16       	cp	r1, r24
    2b52:	4c f5       	brge	.+82     	; 0x2ba6 <buzzerAlarm+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e2       	ldi	r20, 0x20	; 32
    2b62:	51 e4       	ldi	r21, 0x41	; 65
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9e 83       	std	Y+6, r25	; 0x06
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
    2b7c:	0f c0       	rjmp	.+30     	; 0x2b9c <buzzerAlarm+0xd4>
    2b7e:	88 ec       	ldi	r24, 0xC8	; 200
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <buzzerAlarm+0xc2>
    2b8e:	9c 83       	std	Y+4, r25	; 0x04
    2b90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	69 f7       	brne	.-38     	; 0x2b7e <buzzerAlarm+0xb6>
    2ba4:	14 c0       	rjmp	.+40     	; 0x2bce <buzzerAlarm+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9e 83       	std	Y+6, r25	; 0x06
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	89 83       	std	Y+1, r24	; 0x01
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <buzzerAlarm+0xfe>
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        buzzerIsSounding=1;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	80 93 86 04 	sts	0x0486, r24

void buzzerAlarm(void)
{
    GIE_VoidEnable();
    /// Time out
    while(isSwitchPressed==0)
    2bd4:	80 91 84 04 	lds	r24, 0x0484
    2bd8:	88 23       	and	r24, r24
    2bda:	09 f4       	brne	.+2      	; 0x2bde <buzzerAlarm+0x116>
    2bdc:	82 cf       	rjmp	.-252    	; 0x2ae2 <buzzerAlarm+0x1a>
    {
        DIO_VoidTogglePin(DIO_PORTB,DIO_PIN0);
        _delay_ms(500);
        buzzerIsSounding=1;
    }
    isSwitchPressed=0;
    2bde:	10 92 84 04 	sts	0x0484, r1
    buzzerIsSounding=0;
    2be2:	10 92 86 04 	sts	0x0486, r1
}
    2be6:	2e 96       	adiw	r28, 0x0e	; 14
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <stopBuzzer>:
void stopBuzzer(void)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    DIO_VoidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_VoidSetPinValue>
    isSwitchPressed=1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 93 84 04 	sts	0x0484, r24
}
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <__prologue_saves__>:
    2c16:	2f 92       	push	r2
    2c18:	3f 92       	push	r3
    2c1a:	4f 92       	push	r4
    2c1c:	5f 92       	push	r5
    2c1e:	6f 92       	push	r6
    2c20:	7f 92       	push	r7
    2c22:	8f 92       	push	r8
    2c24:	9f 92       	push	r9
    2c26:	af 92       	push	r10
    2c28:	bf 92       	push	r11
    2c2a:	cf 92       	push	r12
    2c2c:	df 92       	push	r13
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	ca 1b       	sub	r28, r26
    2c40:	db 0b       	sbc	r29, r27
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	09 94       	ijmp

00002c4e <__epilogue_restores__>:
    2c4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2c50:	39 88       	ldd	r3, Y+17	; 0x11
    2c52:	48 88       	ldd	r4, Y+16	; 0x10
    2c54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c60:	b9 84       	ldd	r11, Y+9	; 0x09
    2c62:	c8 84       	ldd	r12, Y+8	; 0x08
    2c64:	df 80       	ldd	r13, Y+7	; 0x07
    2c66:	ee 80       	ldd	r14, Y+6	; 0x06
    2c68:	fd 80       	ldd	r15, Y+5	; 0x05
    2c6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2c6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2c6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2c70:	b9 81       	ldd	r27, Y+1	; 0x01
    2c72:	ce 0f       	add	r28, r30
    2c74:	d1 1d       	adc	r29, r1
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	ed 01       	movw	r28, r26
    2c82:	08 95       	ret

00002c84 <strcmp>:
    2c84:	fb 01       	movw	r30, r22
    2c86:	dc 01       	movw	r26, r24
    2c88:	8d 91       	ld	r24, X+
    2c8a:	01 90       	ld	r0, Z+
    2c8c:	80 19       	sub	r24, r0
    2c8e:	01 10       	cpse	r0, r1
    2c90:	d9 f3       	breq	.-10     	; 0x2c88 <strcmp+0x4>
    2c92:	99 0b       	sbc	r25, r25
    2c94:	08 95       	ret

00002c96 <_exit>:
    2c96:	f8 94       	cli

00002c98 <__stop_program>:
    2c98:	ff cf       	rjmp	.-2      	; 0x2c98 <__stop_program>
