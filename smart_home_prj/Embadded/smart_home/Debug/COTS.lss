
IMT_PRJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  000022a0  00002334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000d4  008000d4  000023a8  2**0
                  ALLOC
  3 .stab         000026d0  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001354  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a51b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 11 	call	0x2200	; 0x2200 <main>
      8a:	0c 94 4e 11 	jmp	0x229c	; 0x229c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 11 	jmp	0x224e	; 0x224e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInitUART>:
#include "UART_Config.h"

static void   (*UART_RXCallBackOVFunc)(void )= NULL;

void UART_voidInitUART(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

    /* make local var to collect bits values before assign it to UCSRC Register */
    u8 Local_u8RegValue=0;
     b50:	19 82       	std	Y+1, r1	; 0x01

    /*set bit 7 to select writing in UCSRC not UBRRH */
    SET_BIT(Local_u8RegValue,UART_UCSRC_URSEL);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01

    /* Select Asyncronous */
    CLR_BIT(Local_u8RegValue,UART_UCSRC_UMSEL);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	89 83       	std	Y+1, r24	; 0x01

    /*Select Parity Disable*/
    CLR_BIT(Local_u8RegValue,UART_UCSRC_UPM1);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7d       	andi	r24, 0xDF	; 223
     b62:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_u8RegValue,UART_UCSRC_UPM0);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	8f 7e       	andi	r24, 0xEF	; 239
     b68:	89 83       	std	Y+1, r24	; 0x01

    /* select one bit for stop */
    CLR_BIT(Local_u8RegValue,UART_UCSRC_USBS);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	89 83       	std	Y+1, r24	; 0x01

    /*Select Char Size * bit*/
    CLR_BIT(Local_u8RegValue,UART_UCSRB_UCSZ2);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	8b 7f       	andi	r24, 0xFB	; 251
     b74:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8RegValue,UART_UCSRC_UCSZ0);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	82 60       	ori	r24, 0x02	; 2
     b7a:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8RegValue,UART_UCSRC_UCSZ1);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	84 60       	ori	r24, 0x04	; 4
     b80:	89 83       	std	Y+1, r24	; 0x01


   // Assign Value To Register
    UART_UCSRC=Local_u8RegValue;
     b82:	e0 e4       	ldi	r30, 0x40	; 64
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	80 83       	st	Z, r24

    /*Select Baud Rate 9600 bps*/
    UART_UBRRL=51;   // From table in data sheet
     b8a:	e9 e2       	ldi	r30, 0x29	; 41
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	83 e3       	ldi	r24, 0x33	; 51
     b90:	80 83       	st	Z, r24

	 /*Receive interrupt enable config*/
#if MUART_RX_INTERRUPT_ENABLE==MUART_DISABLED
    CLR_BIT(UART_UCSRB,UART_UCSRB_RXCIE);
#else
    SET_BIT(UART_UCSRB,UART_UCSRB_RXCIE);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24
#endif

    /*Enable Rx and Tx*/
    SET_BIT(UART_UCSRB,UART_UCSRB_RXEN);
     ba0:	aa e2       	ldi	r26, 0x2A	; 42
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ea e2       	ldi	r30, 0x2A	; 42
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 61       	ori	r24, 0x10	; 16
     bac:	8c 93       	st	X, r24
    SET_BIT(UART_UCSRB,UART_UCSRB_TXEN);
     bae:	aa e2       	ldi	r26, 0x2A	; 42
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ea e2       	ldi	r30, 0x2A	; 42
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	8c 93       	st	X, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	//UART_UDR=Copy_u8Data;
    /*wait till Data Register Empty flag is set*/
    while (GET_BIT(UART_UCSRA,UART_UCSRA_UDRE)==0);
     bd0:	eb e2       	ldi	r30, 0x2B	; 43
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 95       	swap	r24
     bd8:	86 95       	lsr	r24
     bda:	87 70       	andi	r24, 0x07	; 7
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	a1 f3       	breq	.-24     	; 0xbd0 <UART_voidSendData+0xc>
        UART_UDR= Copy_u8Data;
     be8:	ec e2       	ldi	r30, 0x2C	; 44
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	80 83       	st	Z, r24
}
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <UART_U8ReceiveData>:

u8 UART_U8ReceiveData(void)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
    /* Waiting till receiving flag is set*/
    while (GET_BIT(UART_UCSRA,UART_UCSRA_RXC)==0);
     c00:	eb e2       	ldi	r30, 0x2B	; 43
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 23       	and	r24, r24
     c08:	dc f7       	brge	.-10     	; 0xc00 <UART_U8ReceiveData+0x8>
        return UART_UDR;
     c0a:	ec e2       	ldi	r30, 0x2C	; 44
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z

}
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <UART_VoidSendString>:
void UART_VoidSendString(char *str)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <UART_VoidSendString+0x6>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <UART_VoidSendString+0x8>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
	u16 i = 0;
     c26:	1a 82       	std	Y+2, r1	; 0x02
     c28:	19 82       	std	Y+1, r1	; 0x01
     c2a:	0f c0       	rjmp	.+30     	; 0xc4a <UART_VoidSendString+0x34>

	while(str[i] != '\0')
	{
		UART_voidSendData(str[i]);
     c2c:	2b 81       	ldd	r18, Y+3	; 0x03
     c2e:	3c 81       	ldd	r19, Y+4	; 0x04
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	f9 01       	movw	r30, r18
     c36:	e8 0f       	add	r30, r24
     c38:	f9 1f       	adc	r31, r25
     c3a:	80 81       	ld	r24, Z
     c3c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <UART_voidSendData>
		i++;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
}
void UART_VoidSendString(char *str)
{
	u16 i = 0;

	while(str[i] != '\0')
     c4a:	2b 81       	ldd	r18, Y+3	; 0x03
     c4c:	3c 81       	ldd	r19, Y+4	; 0x04
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	f9 01       	movw	r30, r18
     c54:	e8 0f       	add	r30, r24
     c56:	f9 1f       	adc	r31, r25
     c58:	80 81       	ld	r24, Z
     c5a:	88 23       	and	r24, r24
     c5c:	39 f7       	brne	.-50     	; 0xc2c <UART_VoidSendString+0x16>
	{
		UART_voidSendData(str[i]);
		i++;
	}
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <UART_u8SetRXCallBack>:



void UART_u8SetRXCallBack(void(*Copy_CallBackFunc)(void))
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <UART_u8SetRXCallBack+0x6>
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_CallBackFunc!=NULL)
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	31 f0       	breq	.+12     	; 0xc8e <UART_u8SetRXCallBack+0x22>
    {
    	UART_RXCallBackOVFunc=Copy_CallBackFunc;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	90 93 d5 00 	sts	0x00D5, r25
     c8a:	80 93 d4 00 	sts	0x00D4, r24
    }
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <__vector_13>:


void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
    if(UART_RXCallBackOVFunc!=NULL)
     cc2:	80 91 d4 00 	lds	r24, 0x00D4
     cc6:	90 91 d5 00 	lds	r25, 0x00D5
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	29 f0       	breq	.+10     	; 0xcd8 <__vector_13+0x40>
    {
    	UART_RXCallBackOVFunc();
     cce:	e0 91 d4 00 	lds	r30, 0x00D4
     cd2:	f0 91 d5 00 	lds	r31, 0x00D5
     cd6:	09 95       	icall
    }

}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <PORT_VoidInit>:
#include "PORT_Config.h"
#include "PORT_Interface.h"
#include "PORT_private.h"

void PORT_VoidInit()
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
DDRA_REG=PORTA_DIR;
     d06:	ea e3       	ldi	r30, 0x3A	; 58
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	80 83       	st	Z, r24
DDRB_REG=PORTB_DIR;
     d0e:	e7 e3       	ldi	r30, 0x37	; 55
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	10 82       	st	Z, r1
DDRC_REG=PORTC_DIR;
     d14:	e4 e3       	ldi	r30, 0x34	; 52
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	80 83       	st	Z, r24
DDRD_REG=PORTD_DIR;
     d1c:	e1 e3       	ldi	r30, 0x31	; 49
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	80 83       	st	Z, r24

PORTA_REG_INITIAL=PORTA_INITIAL_VALUE;
     d24:	eb e3       	ldi	r30, 0x3B	; 59
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	80 83       	st	Z, r24
PORTB_REG_INITIAL=PORTB_INITIAL_VALUE;
     d2c:	e8 e3       	ldi	r30, 0x38	; 56
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	10 82       	st	Z, r1
PORTC_REG_INITIAL=PORTC_INITIAL_VALUE;
     d32:	e5 e3       	ldi	r30, 0x35	; 53
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	10 82       	st	Z, r1
PORTD_REG_INITIAL=PORTD_INITIAL_VALUE;
     d38:	e2 e3       	ldi	r30, 0x32	; 50
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	80 83       	st	Z, r24

}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <GIE_VoidEnable>:
#include "GIE_Interface.h"
#include "GIE_Configration.h"


void GIE_VoidEnable(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG,SREG_I_PIN);
     d4e:	af e5       	ldi	r26, 0x5F	; 95
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ef e5       	ldi	r30, 0x5F	; 95
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	8c 93       	st	X, r24
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG_REG,SREG_I_PIN);
     d6a:	af e5       	ldi	r26, 0x5F	; 95
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ef e5       	ldi	r30, 0x5F	; 95
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 77       	andi	r24, 0x7F	; 127
     d76:	8c 93       	st	X, r24
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <EXTI_VoidINT0Init>:
#include "../../04_LIB/BIT_MATH.h"



void EXTI_VoidINT0Init(void)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62

    switch (EXTI_CURRENT_INT0_MOOD)
    {
        case EXTI_LOW_MOOD:
            CLR_BIT(EXTI_MCUCR,EXTI_ISC00_PIN);
     d86:	a5 e5       	ldi	r26, 0x55	; 85
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e5       	ldi	r30, 0x55	; 85
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8e 7f       	andi	r24, 0xFE	; 254
     d92:	8c 93       	st	X, r24
            CLR_BIT(EXTI_MCUCR,EXTI_ISC01_PIN);
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8d 7f       	andi	r24, 0xFD	; 253
     da0:	8c 93       	st	X, r24
            break;
    }



}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <EXTI_VoidINT1Init>:
void EXTI_VoidINT1Init(void)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62

    switch (EXTI_CURRENT_INT1_MOOD)
    {
        case EXTI_LOW_MOOD:
            CLR_BIT(EXTI_MCUCR,EXTI_ISC00_PIN);
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8e 7f       	andi	r24, 0xFE	; 254
     dbc:	8c 93       	st	X, r24
            CLR_BIT(EXTI_MCUCR,EXTI_ISC01_PIN);
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8d 7f       	andi	r24, 0xFD	; 253
     dca:	8c 93       	st	X, r24
            break;
    }



}
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <EXTI_VoidINT2Init>:
void EXTI_VoidINT2Init(void)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62

    switch (EXTI_CURRENT_INT2_MOOD)
    {
        case EXTI_FAILING_EDGE_MOOD:
            CLR_BIT(EXTI_MCUCR,EXTI_ISC00_PIN);
     dda:	a5 e5       	ldi	r26, 0x55	; 85
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e5 e5       	ldi	r30, 0x55	; 85
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
            SET_BIT(EXTI_MCUCR,EXTI_ISC01_PIN);
     de8:	a5 e5       	ldi	r26, 0x55	; 85
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e5 e5       	ldi	r30, 0x55	; 85
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	8c 93       	st	X, r24
            break;
    }



}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <EXTI_VoidINT0Enable>:


void EXTI_VoidINT0Enable(void)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_INTF0_PIN);
     e04:	ab e5       	ldi	r26, 0x5B	; 91
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	eb e5       	ldi	r30, 0x5B	; 91
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	8c 93       	st	X, r24
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <EXTI_VoidINT1Enable>:
void EXTI_VoidINT1Enable(void)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_GICR,EXTI_INTF1_PIN);
     e20:	ab e5       	ldi	r26, 0x5B	; 91
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e5       	ldi	r30, 0x5B	; 91
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	8c 93       	st	X, r24
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <EXTI_VoidINT2Enable>:
void EXTI_VoidINT2Enable(void)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_GICR,EXTI_INTF2_PIN);
     e3c:	ab e5       	ldi	r26, 0x5B	; 91
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e5       	ldi	r30, 0x5B	; 91
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 62       	ori	r24, 0x20	; 32
     e48:	8c 93       	st	X, r24
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <EXTI_VoidINT0Disable>:


void EXTI_VoidINT0Disable(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_INTF0_PIN);
     e58:	ab e5       	ldi	r26, 0x5B	; 91
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	eb e5       	ldi	r30, 0x5B	; 91
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 7b       	andi	r24, 0xBF	; 191
     e64:	8c 93       	st	X, r24
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <EXTI_VoidINT1Disable>:
void EXTI_VoidINT1Disable(void)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_GICR,EXTI_INTF1_PIN);
     e74:	ab e5       	ldi	r26, 0x5B	; 91
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	eb e5       	ldi	r30, 0x5B	; 91
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	8c 93       	st	X, r24
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <EXTI_VoidINT2Disable>:
void EXTI_VoidINT2Disable(void)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_GICR,EXTI_INTF2_PIN);
     e90:	ab e5       	ldi	r26, 0x5B	; 91
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e5       	ldi	r30, 0x5B	; 91
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	8c 93       	st	X, r24
}
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <__vector_1>:



void __vector_1(void)    /// vector1 for INT 0
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	//MDIO_VoidTogglePin(PORTD,PIN5);

}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <DIO_VoidSetPinDirection>:
#include "../../04_LIB/BIT_MATH.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

void DIO_VoidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Direction)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	27 97       	sbiw	r28, 0x07	; 7
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	6a 83       	std	Y+2, r22	; 0x02
     edc:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Direction==DIO_INPUT_PIN)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 23       	and	r24, r24
     ee2:	09 f0       	breq	.+2      	; 0xee6 <DIO_VoidSetPinDirection+0x22>
     ee4:	54 c0       	rjmp	.+168    	; 0xf8e <DIO_VoidSetPinDirection+0xca>
	{
		switch(Copy_U8Port)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3f 83       	std	Y+7, r19	; 0x07
     eee:	2e 83       	std	Y+6, r18	; 0x06
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	91 05       	cpc	r25, r1
     ef8:	01 f1       	breq	.+64     	; 0xf3a <DIO_VoidSetPinDirection+0x76>
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	3f 81       	ldd	r19, Y+7	; 0x07
     efe:	23 30       	cpi	r18, 0x03	; 3
     f00:	31 05       	cpc	r19, r1
     f02:	81 f1       	breq	.+96     	; 0xf64 <DIO_VoidSetPinDirection+0xa0>
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <DIO_VoidSetPinDirection+0x4c>
     f0e:	b1 c0       	rjmp	.+354    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
		{
			case DIO_PORTB: CLR_BIT(DDRB_REG,Copy_U8Pin); break ;
     f10:	a7 e3       	ldi	r26, 0x37	; 55
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e7 e3       	ldi	r30, 0x37	; 55
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_VoidSetPinDirection+0x6a>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_VoidSetPinDirection+0x66>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	9c c0       	rjmp	.+312    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTC: CLR_BIT(DDRC_REG,Copy_U8Pin); break ;
     f3a:	a4 e3       	ldi	r26, 0x34	; 52
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e4 e3       	ldi	r30, 0x34	; 52
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_VoidSetPinDirection+0x94>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_VoidSetPinDirection+0x90>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	87 c0       	rjmp	.+270    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTD: CLR_BIT(DDRD_REG,Copy_U8Pin); break ;
     f64:	a1 e3       	ldi	r26, 0x31	; 49
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_VoidSetPinDirection+0xbe>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_VoidSetPinDirection+0xba>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	72 c0       	rjmp	.+228    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
		}
		
	}
	else if(Copy_U8Direction==DIO_OUTPUT_PIN)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	09 f0       	breq	.+2      	; 0xf96 <DIO_VoidSetPinDirection+0xd2>
     f94:	6e c0       	rjmp	.+220    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
	{
		switch(Copy_U8Port)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3d 83       	std	Y+5, r19	; 0x05
     f9e:	2c 83       	std	Y+4, r18	; 0x04
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	49 f1       	breq	.+82     	; 0xffc <DIO_VoidSetPinDirection+0x138>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	2c f4       	brge	.+10     	; 0xfbe <DIO_VoidSetPinDirection+0xfa>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	61 f0       	breq	.+24     	; 0xfd4 <DIO_VoidSetPinDirection+0x110>
     fbc:	5a c0       	rjmp	.+180    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
     fbe:	2c 81       	ldd	r18, Y+4	; 0x04
     fc0:	3d 81       	ldd	r19, Y+5	; 0x05
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	71 f1       	breq	.+92     	; 0x1024 <DIO_VoidSetPinDirection+0x160>
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	e9 f1       	breq	.+122    	; 0x104c <DIO_VoidSetPinDirection+0x188>
     fd2:	4f c0       	rjmp	.+158    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
		{
			case DIO_PORTA: SET_BIT(DDRA_REG,Copy_U8Pin); break ;
     fd4:	aa e3       	ldi	r26, 0x3A	; 58
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ea e3       	ldi	r30, 0x3A	; 58
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_VoidSetPinDirection+0x12e>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_VoidSetPinDirection+0x12a>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	3b c0       	rjmp	.+118    	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTB: SET_BIT(DDRB_REG,Copy_U8Pin); break ;
     ffc:	a7 e3       	ldi	r26, 0x37	; 55
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e3       	ldi	r30, 0x37	; 55
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_VoidSetPinDirection+0x156>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_VoidSetPinDirection+0x152>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	27 c0       	rjmp	.+78     	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTC: SET_BIT(DDRC_REG,Copy_U8Pin); break ;
    1024:	a4 e3       	ldi	r26, 0x34	; 52
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e4 e3       	ldi	r30, 0x34	; 52
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_VoidSetPinDirection+0x17e>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_VoidSetPinDirection+0x17a>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	13 c0       	rjmp	.+38     	; 0x1072 <DIO_VoidSetPinDirection+0x1ae>
			case DIO_PORTD: SET_BIT(DDRD_REG,Copy_U8Pin); break ;
    104c:	a1 e3       	ldi	r26, 0x31	; 49
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_VoidSetPinDirection+0x1a6>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_VoidSetPinDirection+0x1a2>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
		}
		
	}
		
}
    1072:	27 96       	adiw	r28, 0x07	; 7
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	27 97       	sbiw	r28, 0x07	; 7
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	6a 83       	std	Y+2, r22	; 0x02
    109c:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_U8Value==DIO_HIGH)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO_VoidSetPinValue+0x22>
    10a4:	6f c0       	rjmp	.+222    	; 0x1184 <DIO_VoidSetPinValue+0x100>
    {
        switch (Copy_U8Port)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3f 83       	std	Y+7, r19	; 0x07
    10ae:	2e 83       	std	Y+6, r18	; 0x06
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	49 f1       	breq	.+82     	; 0x110c <DIO_VoidSetPinValue+0x88>
    10ba:	2e 81       	ldd	r18, Y+6	; 0x06
    10bc:	3f 81       	ldd	r19, Y+7	; 0x07
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <DIO_VoidSetPinValue+0x4a>
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	9f 81       	ldd	r25, Y+7	; 0x07
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <DIO_VoidSetPinValue+0x60>
    10cc:	d2 c0       	rjmp	.+420    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
    10ce:	2e 81       	ldd	r18, Y+6	; 0x06
    10d0:	3f 81       	ldd	r19, Y+7	; 0x07
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <DIO_VoidSetPinValue+0xb0>
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	9f 81       	ldd	r25, Y+7	; 0x07
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	e9 f1       	breq	.+122    	; 0x115c <DIO_VoidSetPinValue+0xd8>
    10e2:	c7 c0       	rjmp	.+398    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
        {
            case DIO_PORTA: SET_BIT(PORTA_REG,Copy_U8Pin); break;
    10e4:	ab e3       	ldi	r26, 0x3B	; 59
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_VoidSetPinValue+0x7e>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_VoidSetPinValue+0x7a>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	b3 c0       	rjmp	.+358    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTB: SET_BIT(PORTB_REG,Copy_U8Pin); break;
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_VoidSetPinValue+0xa6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_VoidSetPinValue+0xa2>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	9f c0       	rjmp	.+318    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTC: SET_BIT(PORTC_REG,Copy_U8Pin); break;
    1134:	a5 e3       	ldi	r26, 0x35	; 53
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_VoidSetPinValue+0xce>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_VoidSetPinValue+0xca>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	8b c0       	rjmp	.+278    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTD: SET_BIT(PORTD_REG,Copy_U8Pin); break;
    115c:	a2 e3       	ldi	r26, 0x32	; 50
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_VoidSetPinValue+0xf6>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_VoidSetPinValue+0xf2>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	77 c0       	rjmp	.+238    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>

        }

    }
    else if(Copy_U8Value==DIO_LOW)
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 23       	and	r24, r24
    1188:	09 f0       	breq	.+2      	; 0x118c <DIO_VoidSetPinValue+0x108>
    118a:	73 c0       	rjmp	.+230    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
    {
        switch (Copy_U8Port)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3d 83       	std	Y+5, r19	; 0x05
    1194:	2c 83       	std	Y+4, r18	; 0x04
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	59 f1       	breq	.+86     	; 0x11f6 <DIO_VoidSetPinValue+0x172>
    11a0:	2c 81       	ldd	r18, Y+4	; 0x04
    11a2:	3d 81       	ldd	r19, Y+5	; 0x05
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <DIO_VoidSetPinValue+0x130>
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f0       	breq	.+26     	; 0x11cc <DIO_VoidSetPinValue+0x148>
    11b2:	5f c0       	rjmp	.+190    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	89 f1       	breq	.+98     	; 0x1220 <DIO_VoidSetPinValue+0x19c>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <DIO_VoidSetPinValue+0x146>
    11c8:	40 c0       	rjmp	.+128    	; 0x124a <DIO_VoidSetPinValue+0x1c6>
    11ca:	53 c0       	rjmp	.+166    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
        {
            case DIO_PORTA: CLR_BIT(PORTA_REG,Copy_U8Pin); break;
    11cc:	ab e3       	ldi	r26, 0x3B	; 59
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb e3       	ldi	r30, 0x3B	; 59
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_VoidSetPinValue+0x166>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_VoidSetPinValue+0x162>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	3e c0       	rjmp	.+124    	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTB: CLR_BIT(PORTB_REG,Copy_U8Pin); break;
    11f6:	a8 e3       	ldi	r26, 0x38	; 56
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e8 e3       	ldi	r30, 0x38	; 56
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_VoidSetPinValue+0x190>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_VoidSetPinValue+0x18c>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	29 c0       	rjmp	.+82     	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTC: CLR_BIT(PORTC_REG,Copy_U8Pin); break;
    1220:	a5 e3       	ldi	r26, 0x35	; 53
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e3       	ldi	r30, 0x35	; 53
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_VoidSetPinValue+0x1ba>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_VoidSetPinValue+0x1b6>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <DIO_VoidSetPinValue+0x1ee>
            case DIO_PORTD: CLR_BIT(PORTD_REG,Copy_U8Pin); break;
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_VoidSetPinValue+0x1e4>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_VoidSetPinValue+0x1e0>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24

        }

    }

}
    1272:	27 96       	adiw	r28, 0x07	; 7
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <DIO_VoidSetPortDirection>:

void  DIO_VoidSetPortDirection(u8 Copy_U8Port,u8 Copy_U8Direction)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_VoidSetPortDirection+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <DIO_VoidSetPortDirection+0x8>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3c 83       	std	Y+4, r19	; 0x04
    129c:	2b 83       	std	Y+3, r18	; 0x03
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	d1 f0       	breq	.+52     	; 0x12dc <DIO_VoidSetPortDirection+0x58>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_VoidSetPortDirection+0x38>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_VoidSetPortDirection+0x4e>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <DIO_VoidSetPortDirection+0x74>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_VoidSetPortDirection+0x62>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_VoidSetPortDirection+0x6c>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_VoidSetPortDirection+0x74>
    {
        case     DIO_PORTA: DDRA_REG = Copy_U8Direction; break;
    12d2:	ea e3       	ldi	r30, 0x3A	; 58
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <DIO_VoidSetPortDirection+0x74>
        case     DIO_PORTB: DDRB_REG = Copy_U8Direction; break;
    12dc:	e7 e3       	ldi	r30, 0x37	; 55
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <DIO_VoidSetPortDirection+0x74>
        case     DIO_PORTC: DDRC_REG = Copy_U8Direction; break;
    12e6:	e4 e3       	ldi	r30, 0x34	; 52
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_VoidSetPortDirection+0x74>
        case     DIO_PORTD: DDRD_REG = Copy_U8Direction; break;
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24

    }

}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_VoidSetPortValue>:

void  DIO_VoidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Value)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_VoidSetPortValue+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_VoidSetPortValue+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	d1 f0       	breq	.+52     	; 0x135e <DIO_VoidSetPortValue+0x58>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <DIO_VoidSetPortValue+0x38>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <DIO_VoidSetPortValue+0x4e>
    133c:	1e c0       	rjmp	.+60     	; 0x137a <DIO_VoidSetPortValue+0x74>
    133e:	2b 81       	ldd	r18, Y+3	; 0x03
    1340:	3c 81       	ldd	r19, Y+4	; 0x04
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	81 f0       	breq	.+32     	; 0x1368 <DIO_VoidSetPortValue+0x62>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	81 f0       	breq	.+32     	; 0x1372 <DIO_VoidSetPortValue+0x6c>
    1352:	13 c0       	rjmp	.+38     	; 0x137a <DIO_VoidSetPortValue+0x74>
    {
        case     DIO_PORTA: PORTA_REG = Copy_U8Value; break;
    1354:	eb e3       	ldi	r30, 0x3B	; 59
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
    135c:	0e c0       	rjmp	.+28     	; 0x137a <DIO_VoidSetPortValue+0x74>
        case     DIO_PORTB: PORTB_REG = Copy_U8Value; break;
    135e:	e8 e3       	ldi	r30, 0x38	; 56
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 83       	st	Z, r24
    1366:	09 c0       	rjmp	.+18     	; 0x137a <DIO_VoidSetPortValue+0x74>
        case     DIO_PORTC: PORTC_REG = Copy_U8Value; break;
    1368:	e5 e3       	ldi	r30, 0x35	; 53
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	80 83       	st	Z, r24
    1370:	04 c0       	rjmp	.+8      	; 0x137a <DIO_VoidSetPortValue+0x74>
        case     DIO_PORTD: PORTD_REG = Copy_U8Value; break;
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 83       	st	Z, r24

    }

}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <DIO_VoidTogglePin>:

void  DIO_VoidTogglePin(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_VoidTogglePin+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <DIO_VoidTogglePin+0x8>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3c 83       	std	Y+4, r19	; 0x04
    13a0:	2b 83       	std	Y+3, r18	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	49 f1       	breq	.+82     	; 0x13fe <DIO_VoidTogglePin+0x76>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <DIO_VoidTogglePin+0x38>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <DIO_VoidTogglePin+0x4e>
    13be:	5a c0       	rjmp	.+180    	; 0x1474 <DIO_VoidTogglePin+0xec>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	71 f1       	breq	.+92     	; 0x1426 <DIO_VoidTogglePin+0x9e>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	e9 f1       	breq	.+122    	; 0x144e <DIO_VoidTogglePin+0xc6>
    13d4:	4f c0       	rjmp	.+158    	; 0x1474 <DIO_VoidTogglePin+0xec>
    {
        case DIO_PORTA: TOGGLE_BIT(PORTA_REG,Copy_U8Pin); break;
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_VoidTogglePin+0x6c>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_VoidTogglePin+0x68>
    13f8:	84 27       	eor	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	3b c0       	rjmp	.+118    	; 0x1474 <DIO_VoidTogglePin+0xec>
        case DIO_PORTB: TOGGLE_BIT(PORTB_REG,Copy_U8Pin); break;
    13fe:	a8 e3       	ldi	r26, 0x38	; 56
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e8 e3       	ldi	r30, 0x38	; 56
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_VoidTogglePin+0x94>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_VoidTogglePin+0x90>
    1420:	84 27       	eor	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	27 c0       	rjmp	.+78     	; 0x1474 <DIO_VoidTogglePin+0xec>
        case DIO_PORTC: TOGGLE_BIT(PORTC_REG,Copy_U8Pin); break;
    1426:	a5 e3       	ldi	r26, 0x35	; 53
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e3       	ldi	r30, 0x35	; 53
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_VoidTogglePin+0xbc>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_VoidTogglePin+0xb8>
    1448:	84 27       	eor	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	13 c0       	rjmp	.+38     	; 0x1474 <DIO_VoidTogglePin+0xec>
        case DIO_PORTD: TOGGLE_BIT(PORTD_REG,Copy_U8Pin); break;
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_VoidTogglePin+0xe4>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_VoidTogglePin+0xe0>
    1470:	84 27       	eor	r24, r20
    1472:	8c 93       	st	X, r24

    }
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_U8GetPinValue+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <DIO_U8GetPinValue+0x8>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_ReturnedValue; 			// LOC mean local variable
	switch(Copy_U8Port)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3d 83       	std	Y+5, r19	; 0x05
    149c:	2c 83       	std	Y+4, r18	; 0x04
    149e:	4c 81       	ldd	r20, Y+4	; 0x04
    14a0:	5d 81       	ldd	r21, Y+5	; 0x05
    14a2:	41 30       	cpi	r20, 0x01	; 1
    14a4:	51 05       	cpc	r21, r1
    14a6:	41 f1       	breq	.+80     	; 0x14f8 <DIO_U8GetPinValue+0x76>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	91 05       	cpc	r25, r1
    14b0:	34 f4       	brge	.+12     	; 0x14be <DIO_U8GetPinValue+0x3c>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <DIO_U8GetPinValue+0x52>
    14bc:	52 c0       	rjmp	.+164    	; 0x1562 <DIO_U8GetPinValue+0xe0>
    14be:	4c 81       	ldd	r20, Y+4	; 0x04
    14c0:	5d 81       	ldd	r21, Y+5	; 0x05
    14c2:	42 30       	cpi	r20, 0x02	; 2
    14c4:	51 05       	cpc	r21, r1
    14c6:	51 f1       	breq	.+84     	; 0x151c <DIO_U8GetPinValue+0x9a>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	b9 f1       	breq	.+110    	; 0x1540 <DIO_U8GetPinValue+0xbe>
    14d2:	47 c0       	rjmp	.+142    	; 0x1562 <DIO_U8GetPinValue+0xe0>
	{
		case DIO_PORTA: LOC_ReturnedValue= GET_BIT(PINA_REG,Copy_U8Pin); break;
    14d4:	e9 e3       	ldi	r30, 0x39	; 57
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_U8GetPinValue+0x6a>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_U8GetPinValue+0x66>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	35 c0       	rjmp	.+106    	; 0x1562 <DIO_U8GetPinValue+0xe0>
		case DIO_PORTB: LOC_ReturnedValue= GET_BIT(PINB_REG,Copy_U8Pin); break;
    14f8:	e6 e3       	ldi	r30, 0x36	; 54
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_U8GetPinValue+0x8e>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_U8GetPinValue+0x8a>
    1514:	ca 01       	movw	r24, r20
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	23 c0       	rjmp	.+70     	; 0x1562 <DIO_U8GetPinValue+0xe0>
		case DIO_PORTC: LOC_ReturnedValue= GET_BIT(PINC_REG,Copy_U8Pin); break;
    151c:	e3 e3       	ldi	r30, 0x33	; 51
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_U8GetPinValue+0xb2>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_U8GetPinValue+0xae>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	11 c0       	rjmp	.+34     	; 0x1562 <DIO_U8GetPinValue+0xe0>
		case DIO_PORTD: LOC_ReturnedValue= GET_BIT(PIND_REG,Copy_U8Pin); break;
    1540:	e0 e3       	ldi	r30, 0x30	; 48
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_U8GetPinValue+0xd6>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_U8GetPinValue+0xd2>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return LOC_ReturnedValue;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <LCD_voidWriteCommand>:
  * Description : write command to LCD
  * Arguments   : u8 Command       
  * return      : void
  */
  void LCD_voidWriteCommand(u8 Copy_u8Command)
  {
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	2f 97       	sbiw	r28, 0x0f	; 15
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8f 87       	std	Y+15, r24	; 0x0f
	  /*Set RW pin 0 (Write Mode selected)*/
	  DIO_VoidSetPinValue(ContREG,LCD_RW,DIO_LOW) ;
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	66 e0       	ldi	r22, 0x06	; 6
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
	  /*Set RS pin 0 (Instruction register selected)*/
	  DIO_VoidSetPinValue(ContREG,LCD_RS,DIO_LOW) ;
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	67 e0       	ldi	r22, 0x07	; 7
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
	  /*output instruction data to Data Bus*/
	  switch(Copy_u8Command)
    159e:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	51 f4       	brne	.+20     	; 0x15be <LCD_voidWriteCommand+0x4a>
	  {
		  /*if command value is 1 clear data register and output 1 to it*/
		  case 1  : { DIO_VoidSetPortValue(DataREG,DIO_LOW); DIO_VoidSetPinValue(DataREG,LCD_DATA_REG_PIN0,DIO_HIGH); } break;
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_VoidSetPortValue>
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <LCD_voidWriteCommand+0x52>
		  /*else output command to data register*/
		  default : { DIO_VoidSetPortValue(DataREG,Copy_u8Command); }
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    15c2:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_VoidSetPortValue>

	  }/*end of switch case*/

	  /*Set EN pin 1 (LCD Read data )*/
	  DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_HIGH);
    15c6:	83 e0       	ldi	r24, 0x03	; 3
    15c8:	65 e0       	ldi	r22, 0x05	; 5
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e4       	ldi	r27, 0x40	; 64
    15d8:	8b 87       	std	Y+11, r24	; 0x0b
    15da:	9c 87       	std	Y+12, r25	; 0x0c
    15dc:	ad 87       	std	Y+13, r26	; 0x0d
    15de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	4a ef       	ldi	r20, 0xFA	; 250
    15ee:	54 e4       	ldi	r21, 0x44	; 68
    15f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8f 83       	std	Y+7, r24	; 0x07
    15fa:	98 87       	std	Y+8, r25	; 0x08
    15fc:	a9 87       	std	Y+9, r26	; 0x09
    15fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <LCD_voidWriteCommand+0xae>
		__ticks = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <LCD_voidWriteCommand+0x12c>
	else if (__tmp > 65535)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	4c f5       	brge	.+82     	; 0x168c <LCD_voidWriteCommand+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	6b 85       	ldd	r22, Y+11	; 0x0b
    163c:	7c 85       	ldd	r23, Y+12	; 0x0c
    163e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1640:	9e 85       	ldd	r25, Y+14	; 0x0e
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <LCD_voidWriteCommand+0x10e>
    1664:	88 ec       	ldi	r24, 0xC8	; 200
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_voidWriteCommand+0xfc>
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <LCD_voidWriteCommand+0xf0>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <LCD_voidWriteCommand+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <LCD_voidWriteCommand+0x138>
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
	  //_delay_ms(2);
	  _delay_ms(2);
	  /*Set EN pin 0 (LCD Write data to its reg)*/
	  DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_LOW) ;
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	65 e0       	ldi	r22, 0x05	; 5
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>

  }/*end of LCD_u8WriteCommand()*/
    16be:	2f 96       	adiw	r28, 0x0f	; 15
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <LCD_voidWriteData>:
 * Description : write Data to LCD
 * Arguments   : u8 Data
 * return      : void
 */
 void LCD_voidWriteData(u8 Copy_u8Data)
 {
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	2f 97       	sbiw	r28, 0x0f	; 15
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	8f 87       	std	Y+15, r24	; 0x0f
	 /*Set RW pin 0 (Write Mode selected)*/
	 DIO_VoidSetPinValue(ContREG,LCD_RW,DIO_LOW);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	66 e0       	ldi	r22, 0x06	; 6
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
	 /*Set RS pin 1 (Data register selected)*/
	 DIO_VoidSetPinValue(ContREG,LCD_RS,DIO_HIGH);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	67 e0       	ldi	r22, 0x07	; 7
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
	 /*output data to Data Bus*/
	 /*output instruction data to Data Bus*/
	 switch(Copy_u8Data)
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	51 f4       	brne	.+20     	; 0x171a <LCD_voidWriteData+0x4a>
	 {
		 /*if Data value is 1 clear data register and output 1 to it*/
		 case 1  : { DIO_VoidSetPortValue(DataREG,DIO_LOW); DIO_VoidSetPinValue(DataREG,LCD_DATA_REG_PIN0,DIO_HIGH); } break;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_VoidSetPortValue>
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <LCD_voidWriteData+0x52>
		 /*else output Data to data register*/
		 default : { DIO_VoidSetPortValue(DataREG,Copy_u8Data); }
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	6f 85       	ldd	r22, Y+15	; 0x0f
    171e:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_VoidSetPortValue>

	 }/*end of switch case*/

	 /*Set EN pin 1 (LCD Read data )*/
	 DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_HIGH);
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	65 e0       	ldi	r22, 0x05	; 5
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e4       	ldi	r27, 0x40	; 64
    1734:	8b 87       	std	Y+11, r24	; 0x0b
    1736:	9c 87       	std	Y+12, r25	; 0x0c
    1738:	ad 87       	std	Y+13, r26	; 0x0d
    173a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8f 83       	std	Y+7, r24	; 0x07
    1756:	98 87       	std	Y+8, r25	; 0x08
    1758:	a9 87       	std	Y+9, r26	; 0x09
    175a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <LCD_voidWriteData+0xae>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <LCD_voidWriteData+0x12c>
	else if (__tmp > 65535)
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <LCD_voidWriteData+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	0f c0       	rjmp	.+30     	; 0x17de <LCD_voidWriteData+0x10e>
    17c0:	88 ec       	ldi	r24, 0xC8	; 200
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9c 83       	std	Y+4, r25	; 0x04
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_voidWriteData+0xfc>
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <LCD_voidWriteData+0xf0>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <LCD_voidWriteData+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_voidWriteData+0x138>
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
	 //_delay_ms(2);
	 _delay_ms(2);
	 /*Set EN pin 0 (LCD Write data to its reg)*/
	 DIO_VoidSetPinValue(ContREG,LCD_EN,DIO_LOW);
    1810:	83 e0       	ldi	r24, 0x03	; 3
    1812:	65 e0       	ldi	r22, 0x05	; 5
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>

 }/*end of LCD_u8WriteData()*/
    181a:	2f 96       	adiw	r28, 0x0f	; 15
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <LCD_voidInitializeLCD>:
 *               in 4 bit mode control and data register must be the same register
 * Arguments   : void
 * return      : void
 */
 void LCD_voidInitializeLCD(void)
 {
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	c8 54       	subi	r28, 0x48	; 72
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
	 /*==============================================================
	  * Configure LCD pins direction
	  *==============================================================*/
	 /*Configure RS Pin output*/
	 DIO_VoidSetPinDirection(ContREG,LCD_RS,DIO_OUTPUT_PIN);
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	67 e0       	ldi	r22, 0x07	; 7
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_VoidSetPinDirection>
	 /*Configure RW Pin output*/
	 DIO_VoidSetPinDirection(ContREG,LCD_RW,DIO_OUTPUT_PIN);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	66 e0       	ldi	r22, 0x06	; 6
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_VoidSetPinDirection>
	 /*Configure EN Pin output*/
	 DIO_VoidSetPinDirection(ContREG,LCD_EN,DIO_OUTPUT_PIN);
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	65 e0       	ldi	r22, 0x05	; 5
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_VoidSetPinDirection>
	 /*Configure Data register output*/
	 DIO_VoidSetPortDirection(DataREG,DIO_OUTPUT_PIN);
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_VoidSetPortDirection>
    186c:	fe 01       	movw	r30, r28
    186e:	ed 5b       	subi	r30, 0xBD	; 189
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a8 e4       	ldi	r26, 0x48	; 72
    1878:	b2 e4       	ldi	r27, 0x42	; 66
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	8e 01       	movw	r16, r28
    1884:	01 5c       	subi	r16, 0xC1	; 193
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5b       	subi	r30, 0xBD	; 189
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a ef       	ldi	r20, 0xFA	; 250
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 83       	st	Z, r24
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	a2 83       	std	Z+2, r26	; 0x02
    18ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b0:	fe 01       	movw	r30, r28
    18b2:	ff 96       	adiw	r30, 0x3f	; 63
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <LCD_voidInitializeLCD+0xaa>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9e af       	std	Y+62, r25	; 0x3e
    18d2:	8d af       	std	Y+61, r24	; 0x3d
    18d4:	46 c0       	rjmp	.+140    	; 0x1962 <LCD_voidInitializeLCD+0x136>
	else if (__tmp > 65535)
    18d6:	fe 01       	movw	r30, r28
    18d8:	ff 96       	adiw	r30, 0x3f	; 63
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	64 f5       	brge	.+88     	; 0x194a <LCD_voidInitializeLCD+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	fe 01       	movw	r30, r28
    18f4:	ed 5b       	subi	r30, 0xBD	; 189
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e af       	std	Y+62, r25	; 0x3e
    191e:	8d af       	std	Y+61, r24	; 0x3d
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_voidInitializeLCD+0x114>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9c af       	std	Y+60, r25	; 0x3c
    1928:	8b af       	std	Y+59, r24	; 0x3b
    192a:	8b ad       	ldd	r24, Y+59	; 0x3b
    192c:	9c ad       	ldd	r25, Y+60	; 0x3c
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_voidInitializeLCD+0x102>
    1932:	9c af       	std	Y+60, r25	; 0x3c
    1934:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8d ad       	ldd	r24, Y+61	; 0x3d
    1938:	9e ad       	ldd	r25, Y+62	; 0x3e
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9e af       	std	Y+62, r25	; 0x3e
    193e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8d ad       	ldd	r24, Y+61	; 0x3d
    1942:	9e ad       	ldd	r25, Y+62	; 0x3e
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_voidInitializeLCD+0xf6>
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <LCD_voidInitializeLCD+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	fe 01       	movw	r30, r28
    194c:	ff 96       	adiw	r30, 0x3f	; 63
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e af       	std	Y+62, r25	; 0x3e
    1960:	8d af       	std	Y+61, r24	; 0x3d
    1962:	8d ad       	ldd	r24, Y+61	; 0x3d
    1964:	9e ad       	ldd	r25, Y+62	; 0x3e
    1966:	9a af       	std	Y+58, r25	; 0x3a
    1968:	89 af       	std	Y+57, r24	; 0x39
    196a:	89 ad       	ldd	r24, Y+57	; 0x39
    196c:	9a ad       	ldd	r25, Y+58	; 0x3a
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_voidInitializeLCD+0x142>
    1972:	9a af       	std	Y+58, r25	; 0x3a
    1974:	89 af       	std	Y+57, r24	; 0x39

	 /*==============================================================
	  * Choose font size and number of lines
	  *==============================================================*/
	 /*Set Font size value 5*7 dots or 5*10 dots*/
	  SET_BIT_VALUE(FontSizeAndLineCommand,LCD_FONT_BIT,LCD_FONT_SIZE);
    1976:	80 91 70 00 	lds	r24, 0x0070
    197a:	8b 7f       	andi	r24, 0xFB	; 251
    197c:	80 93 70 00 	sts	0x0070, r24
	 /*Set number of lines 1 or 2*/
	  SET_BIT_VALUE(FontSizeAndLineCommand,LCD_LINE_BIT,LCD_LINE_MODE);
    1980:	80 91 70 00 	lds	r24, 0x0070
    1984:	88 60       	ori	r24, 0x08	; 8
    1986:	80 93 70 00 	sts	0x0070, r24
	  *==============================================================
	  * 8Bit Mode initialization
	  *====================================*/
	 #if (LCD_MODE == LCD_8BIT)
	    /*Choose 8Bit mode in function set instruction*/
		SET_BIT(FontSizeAndLineCommand,LCD_DATALENGTH_BIT);
    198a:	80 91 70 00 	lds	r24, 0x0070
    198e:	80 61       	ori	r24, 0x10	; 16
    1990:	80 93 70 00 	sts	0x0070, r24
		/*send Function set instruction*/
		LCD_voidWriteCommand(FontSizeAndLineCommand);
    1994:	80 91 70 00 	lds	r24, 0x0070
    1998:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	bf e3       	ldi	r27, 0x3F	; 63
    19a4:	8d ab       	std	Y+53, r24	; 0x35
    19a6:	9e ab       	std	Y+54, r25	; 0x36
    19a8:	af ab       	std	Y+55, r26	; 0x37
    19aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	6d a9       	ldd	r22, Y+53	; 0x35
    19ae:	7e a9       	ldd	r23, Y+54	; 0x36
    19b0:	8f a9       	ldd	r24, Y+55	; 0x37
    19b2:	98 ad       	ldd	r25, Y+56	; 0x38
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	89 ab       	std	Y+49, r24	; 0x31
    19c6:	9a ab       	std	Y+50, r25	; 0x32
    19c8:	ab ab       	std	Y+51, r26	; 0x33
    19ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19cc:	69 a9       	ldd	r22, Y+49	; 0x31
    19ce:	7a a9       	ldd	r23, Y+50	; 0x32
    19d0:	8b a9       	ldd	r24, Y+51	; 0x33
    19d2:	9c a9       	ldd	r25, Y+52	; 0x34
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_voidInitializeLCD+0x1c2>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	98 ab       	std	Y+48, r25	; 0x30
    19ea:	8f a7       	std	Y+47, r24	; 0x2f
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_voidInitializeLCD+0x240>
	else if (__tmp > 65535)
    19ee:	69 a9       	ldd	r22, Y+49	; 0x31
    19f0:	7a a9       	ldd	r23, Y+50	; 0x32
    19f2:	8b a9       	ldd	r24, Y+51	; 0x33
    19f4:	9c a9       	ldd	r25, Y+52	; 0x34
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_voidInitializeLCD+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	6d a9       	ldd	r22, Y+53	; 0x35
    1a08:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_voidInitializeLCD+0x222>
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e a7       	std	Y+46, r25	; 0x2e
    1a36:	8d a7       	std	Y+45, r24	; 0x2d
    1a38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_voidInitializeLCD+0x210>
    1a40:	9e a7       	std	Y+46, r25	; 0x2e
    1a42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a46:	98 a9       	ldd	r25, Y+48	; 0x30
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	98 ab       	std	Y+48, r25	; 0x30
    1a4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a50:	98 a9       	ldd	r25, Y+48	; 0x30
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_voidInitializeLCD+0x204>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <LCD_voidInitializeLCD+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	98 ab       	std	Y+48, r25	; 0x30
    1a6a:	8f a7       	std	Y+47, r24	; 0x2f
    1a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a70:	9c a7       	std	Y+44, r25	; 0x2c
    1a72:	8b a7       	std	Y+43, r24	; 0x2b
    1a74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_voidInitializeLCD+0x24c>
    1a7c:	9c a7       	std	Y+44, r25	; 0x2c
    1a7e:	8b a7       	std	Y+43, r24	; 0x2b
		//_delay_ms(1);
		_delay_ms(1);
	 #endif

	 /*send Display ON OFF instruction*/
	 LCD_voidWriteCommand(DisplayAndCursorCommand);
    1a80:	80 91 6f 00 	lds	r24, 0x006F
    1a84:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e8       	ldi	r26, 0x80	; 128
    1a8e:	bf e3       	ldi	r27, 0x3F	; 63
    1a90:	8f a3       	std	Y+39, r24	; 0x27
    1a92:	98 a7       	std	Y+40, r25	; 0x28
    1a94:	a9 a7       	std	Y+41, r26	; 0x29
    1a96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a ef       	ldi	r20, 0xFA	; 250
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8b a3       	std	Y+35, r24	; 0x23
    1ab2:	9c a3       	std	Y+36, r25	; 0x24
    1ab4:	ad a3       	std	Y+37, r26	; 0x25
    1ab6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	2c f4       	brge	.+10     	; 0x1ada <LCD_voidInitializeLCD+0x2ae>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9a a3       	std	Y+34, r25	; 0x22
    1ad6:	89 a3       	std	Y+33, r24	; 0x21
    1ad8:	3f c0       	rjmp	.+126    	; 0x1b58 <LCD_voidInitializeLCD+0x32c>
	else if (__tmp > 65535)
    1ada:	6b a1       	ldd	r22, Y+35	; 0x23
    1adc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	4c f5       	brge	.+82     	; 0x1b44 <LCD_voidInitializeLCD+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	6f a1       	ldd	r22, Y+39	; 0x27
    1af4:	78 a5       	ldd	r23, Y+40	; 0x28
    1af6:	89 a5       	ldd	r24, Y+41	; 0x29
    1af8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9a a3       	std	Y+34, r25	; 0x22
    1b18:	89 a3       	std	Y+33, r24	; 0x21
    1b1a:	0f c0       	rjmp	.+30     	; 0x1b3a <LCD_voidInitializeLCD+0x30e>
    1b1c:	88 ec       	ldi	r24, 0xC8	; 200
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	98 a3       	std	Y+32, r25	; 0x20
    1b22:	8f 8f       	std	Y+31, r24	; 0x1f
    1b24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b26:	98 a1       	ldd	r25, Y+32	; 0x20
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_voidInitializeLCD+0x2fc>
    1b2c:	98 a3       	std	Y+32, r25	; 0x20
    1b2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b30:	89 a1       	ldd	r24, Y+33	; 0x21
    1b32:	9a a1       	ldd	r25, Y+34	; 0x22
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	9a a3       	std	Y+34, r25	; 0x22
    1b38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	69 f7       	brne	.-38     	; 0x1b1c <LCD_voidInitializeLCD+0x2f0>
    1b42:	14 c0       	rjmp	.+40     	; 0x1b6c <LCD_voidInitializeLCD+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b44:	6b a1       	ldd	r22, Y+35	; 0x23
    1b46:	7c a1       	ldd	r23, Y+36	; 0x24
    1b48:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9a a3       	std	Y+34, r25	; 0x22
    1b56:	89 a3       	std	Y+33, r24	; 0x21
    1b58:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_voidInitializeLCD+0x338>
    1b68:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6a:	8d 8f       	std	Y+29, r24	; 0x1d
	 //_delay_ms(1);
	 _delay_ms(1);
	 /*send Display clear instruction*/
	 LCD_voidWriteCommand(LCD_DISP_CLEAR);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a0 e0       	ldi	r26, 0x00	; 0
    1b78:	b0 e4       	ldi	r27, 0x40	; 64
    1b7a:	89 8f       	std	Y+25, r24	; 0x19
    1b7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b82:	69 8d       	ldd	r22, Y+25	; 0x19
    1b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a ef       	ldi	r20, 0xFA	; 250
    1b90:	54 e4       	ldi	r21, 0x44	; 68
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8d 8b       	std	Y+21, r24	; 0x15
    1b9c:	9e 8b       	std	Y+22, r25	; 0x16
    1b9e:	af 8b       	std	Y+23, r26	; 0x17
    1ba0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	2c f4       	brge	.+10     	; 0x1bc4 <LCD_voidInitializeLCD+0x398>
		__ticks = 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	8b 8b       	std	Y+19, r24	; 0x13
    1bc2:	3f c0       	rjmp	.+126    	; 0x1c42 <LCD_voidInitializeLCD+0x416>
	else if (__tmp > 65535)
    1bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bca:	98 8d       	ldd	r25, Y+24	; 0x18
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f e7       	ldi	r20, 0x7F	; 127
    1bd2:	57 e4       	ldi	r21, 0x47	; 71
    1bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	4c f5       	brge	.+82     	; 0x1c2e <LCD_voidInitializeLCD+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <LCD_voidInitializeLCD+0x3f8>
    1c06:	88 ec       	ldi	r24, 0xC8	; 200
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9a 8b       	std	Y+18, r25	; 0x12
    1c0c:	89 8b       	std	Y+17, r24	; 0x11
    1c0e:	89 89       	ldd	r24, Y+17	; 0x11
    1c10:	9a 89       	ldd	r25, Y+18	; 0x12
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <LCD_voidInitializeLCD+0x3e6>
    1c16:	9a 8b       	std	Y+18, r25	; 0x12
    1c18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c24:	8b 89       	ldd	r24, Y+19	; 0x13
    1c26:	9c 89       	ldd	r25, Y+20	; 0x14
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	69 f7       	brne	.-38     	; 0x1c06 <LCD_voidInitializeLCD+0x3da>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <LCD_voidInitializeLCD+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c30:	7e 89       	ldd	r23, Y+22	; 0x16
    1c32:	8f 89       	ldd	r24, Y+23	; 0x17
    1c34:	98 8d       	ldd	r25, Y+24	; 0x18
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
    1c42:	8b 89       	ldd	r24, Y+19	; 0x13
    1c44:	9c 89       	ldd	r25, Y+20	; 0x14
    1c46:	98 8b       	std	Y+16, r25	; 0x10
    1c48:	8f 87       	std	Y+15, r24	; 0x0f
    1c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4c:	98 89       	ldd	r25, Y+16	; 0x10
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_voidInitializeLCD+0x422>
    1c52:	98 8b       	std	Y+16, r25	; 0x10
    1c54:	8f 87       	std	Y+15, r24	; 0x0f
	 //_delay_ms(2);
	 _delay_ms(2);
	 /*send ENTRY MODE set instruction*/
	 LCD_voidWriteCommand(LCD_ENTRY_MODE);
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e0       	ldi	r26, 0x00	; 0
    1c62:	b0 e4       	ldi	r27, 0x40	; 64
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
    1c66:	9c 87       	std	Y+12, r25	; 0x0c
    1c68:	ad 87       	std	Y+13, r26	; 0x0d
    1c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a ef       	ldi	r20, 0xFA	; 250
    1c7a:	54 e4       	ldi	r21, 0x44	; 68
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8f 83       	std	Y+7, r24	; 0x07
    1c86:	98 87       	std	Y+8, r25	; 0x08
    1c88:	a9 87       	std	Y+9, r26	; 0x09
    1c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <LCD_voidInitializeLCD+0x482>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <LCD_voidInitializeLCD+0x500>
	else if (__tmp > 65535)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <LCD_voidInitializeLCD+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <LCD_voidInitializeLCD+0x4e2>
    1cf0:	88 ec       	ldi	r24, 0xC8	; 200
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_voidInitializeLCD+0x4d0>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <LCD_voidInitializeLCD+0x4c4>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <LCD_voidInitializeLCD+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_voidInitializeLCD+0x50c>
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01

	 /*=============================================================================
	  * Initialize custom made characters with pre-configured arrays' values
	  *=============================================================================*/
	 /*jump to CGRAM address*/
	 LCD_voidWriteCommand(LCD_CGRAM_ADDRESS);
    1d40:	80 e4       	ldi	r24, 0x40	; 64
    1d42:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

	 /*fill GCRAM with LCD_u8CustomCharArray values*/
	 for (u8 i = 0 ; i < 8 ; i++)
    1d46:	fe 01       	movw	r30, r28
    1d48:	e8 5b       	subi	r30, 0xB8	; 184
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	10 82       	st	Z, r1
    1d4e:	38 c0       	rjmp	.+112    	; 0x1dc0 <LCD_voidInitializeLCD+0x594>
	 {
		 for (u8 j = 0 ; j < 8 ; j++)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e9 5b       	subi	r30, 0xB9	; 185
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	10 82       	st	Z, r1
    1d58:	24 c0       	rjmp	.+72     	; 0x1da2 <LCD_voidInitializeLCD+0x576>
		 {
			 LCD_voidWriteData(LCD_u8CustomCharArray[i][j]);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e8 5b       	subi	r30, 0xB8	; 184
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	fe 01       	movw	r30, r28
    1d68:	e9 5b       	subi	r30, 0xB9	; 185
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	ca 01       	movw	r24, r20
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	fc 01       	movw	r30, r24
    1d86:	e7 58       	subi	r30, 0x87	; 135
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LCD_voidWriteData>
	 LCD_voidWriteCommand(LCD_CGRAM_ADDRESS);

	 /*fill GCRAM with LCD_u8CustomCharArray values*/
	 for (u8 i = 0 ; i < 8 ; i++)
	 {
		 for (u8 j = 0 ; j < 8 ; j++)
    1d90:	de 01       	movw	r26, r28
    1d92:	a9 5b       	subi	r26, 0xB9	; 185
    1d94:	bf 4f       	sbci	r27, 0xFF	; 255
    1d96:	fe 01       	movw	r30, r28
    1d98:	e9 5b       	subi	r30, 0xB9	; 185
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	8c 93       	st	X, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	e9 5b       	subi	r30, 0xB9	; 185
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	88 30       	cpi	r24, 0x08	; 8
    1dac:	b0 f2       	brcs	.-84     	; 0x1d5a <LCD_voidInitializeLCD+0x52e>
	  *=============================================================================*/
	 /*jump to CGRAM address*/
	 LCD_voidWriteCommand(LCD_CGRAM_ADDRESS);

	 /*fill GCRAM with LCD_u8CustomCharArray values*/
	 for (u8 i = 0 ; i < 8 ; i++)
    1dae:	de 01       	movw	r26, r28
    1db0:	a8 5b       	subi	r26, 0xB8	; 184
    1db2:	bf 4f       	sbci	r27, 0xFF	; 255
    1db4:	fe 01       	movw	r30, r28
    1db6:	e8 5b       	subi	r30, 0xB8	; 184
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 81       	ld	r24, Z
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	8c 93       	st	X, r24
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e8 5b       	subi	r30, 0xB8	; 184
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 30       	cpi	r24, 0x08	; 8
    1dca:	10 f2       	brcs	.-124    	; 0x1d50 <LCD_voidInitializeLCD+0x524>
		 }/*end of j loop*/

	 }/*end of i loop*/

	 /*return to DDRAM address 1*/
	 LCD_voidWriteCommand(LCD_DDRAM_ADD1);
    1dcc:	80 e8       	ldi	r24, 0x80	; 128
    1dce:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

 }/*end of LCD_u8InitializeLCD()*/
    1dd2:	c8 5b       	subi	r28, 0xB8	; 184
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <LCD_voidClearLCD>:
  * Description : clear LCD and return cursor to first position
  * Arguments   : void
  * return      : void
  */
  void LCD_voidClearLCD(void)
  {
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	  /*send Display clear instruction*/
	  LCD_voidWriteCommand(LCD_DISP_CLEAR);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

  }/*end of LCD_voidClearLCD()*/
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_voidReturnHome>:
  * Description : return cursor to first position LCD content doesn't affect
  * Arguments   : void
  * return      : void
  */
  void LCD_voidReturnHome(void)
  {
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	  /*send Return home instruction*/
	  LCD_voidWriteCommand(LCD_RET_HOME);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

  }/*end of LCD_voidReturnHome()*/
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LCD_voidSelectLine>:
  * Description : Select line 1 or 2 in LCD
  * Arguments   : choose line from (LCD_LINE1 or LCD_LINE2)
  * return      : void
  */
  void LCD_voidSelectLine(u8 Copy_u8Line)
  {
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LCD_voidSelectLine+0x6>
    1e18:	0f 92       	push	r0
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	  /*choose line*/
	  switch(Copy_u8Line)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3b 83       	std	Y+3, r19	; 0x03
    1e28:	2a 83       	std	Y+2, r18	; 0x02
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 05       	cpc	r25, r1
    1e32:	31 f0       	breq	.+12     	; 0x1e40 <LCD_voidSelectLine+0x2e>
    1e34:	2a 81       	ldd	r18, Y+2	; 0x02
    1e36:	3b 81       	ldd	r19, Y+3	; 0x03
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	29 f0       	breq	.+10     	; 0x1e48 <LCD_voidSelectLine+0x36>
    1e3e:	07 c0       	rjmp	.+14     	; 0x1e4e <LCD_voidSelectLine+0x3c>
	  {
		  case LCD_LINE1 : {  LCD_voidWriteCommand(LCD_DDRAM_ADD1); } break;
    1e40:	80 e8       	ldi	r24, 0x80	; 128
    1e42:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
    1e46:	03 c0       	rjmp	.+6      	; 0x1e4e <LCD_voidSelectLine+0x3c>
		  case LCD_LINE2 : {  LCD_voidWriteCommand(LCD_DDRAM_ADD2); } break;
    1e48:	80 ec       	ldi	r24, 0xC0	; 192
    1e4a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

	  }/*end of line switch case*/

  }/*end of LCD_voidSelectLine()*/
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <LCD_voidSetCursorPosition>:
  * Arguments   : line LCD_LINE1 or LCD_LINE2
  *               Position from 1 to 16
  * return      : void
  */
  void LCD_voidSetCursorPosition(u8 Copy_u8Line,u8 Copy_u8Position)
  {
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <LCD_voidSetCursorPosition+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <LCD_voidSetCursorPosition+0x8>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	6a 83       	std	Y+2, r22	; 0x02
	  /*choose line*/
	  switch(Copy_u8Line)
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	3c 83       	std	Y+4, r19	; 0x04
    1e72:	2b 83       	std	Y+3, r18	; 0x03
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	31 f0       	breq	.+12     	; 0x1e8a <LCD_voidSetCursorPosition+0x30>
    1e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e80:	3c 81       	ldd	r19, Y+4	; 0x04
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	31 f0       	breq	.+12     	; 0x1e94 <LCD_voidSetCursorPosition+0x3a>
    1e88:	09 c0       	rjmp	.+18     	; 0x1e9c <LCD_voidSetCursorPosition+0x42>
	  {
		  case LCD_LINE1 : { LCD_voidWriteCommand(LCD_DDRAM_ADD1+ Copy_u8Position -1); } break;
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	81 58       	subi	r24, 0x81	; 129
    1e8e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <LCD_voidSetCursorPosition+0x42>
		  case LCD_LINE2 : { LCD_voidWriteCommand(LCD_DDRAM_ADD2+ Copy_u8Position -1); } break;
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	81 54       	subi	r24, 0x41	; 65
    1e98:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

	  }/*end of line switch case*/

  }/*end of LCD_voidSetCursorPosition()*/
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_voidDisplayChar>:
  * Description : Output character to current cursor position
  * Arguments   : Char_Data : Character to be displayed a number (0-9) or a character
  * return      : void
  */
  void LCD_voidDisplayChar(u8 Copy_u8CharData)
  {
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	  /*check character type*/
	  if( (Copy_u8CharData >= 0) && (Copy_u8CharData < 10) )
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	8a 30       	cpi	r24, 0x0A	; 10
    1eba:	28 f4       	brcc	.+10     	; 0x1ec6 <LCD_voidDisplayChar+0x1c>
	  {
		  /*if character is number*/
		  LCD_voidWriteData((Copy_u8CharData+'0'));
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	80 5d       	subi	r24, 0xD0	; 208
    1ec0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LCD_voidWriteData>
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <LCD_voidDisplayChar+0x22>

	  }
	  else
	  {
		  /*if character is char*/
		  LCD_voidWriteData(Copy_u8CharData);
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LCD_voidWriteData>

	  }/*end of character type check*/


  }/*end of LCD_voidDisplayChar*/
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_voidDisplayString>:
  *               - u8 character string
  *			      Data type: LCD_NUMBER or LCD_STRING
  * return      : void
  */
  void LCD_voidDisplayString(char  *Copy_u32StringDataPtr)
  {
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <LCD_voidDisplayString+0x6>
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9b 83       	std	Y+3, r25	; 0x03
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
	  u8 count=0;
    1ee4:	19 82       	std	Y+1, r1	; 0x01
    1ee6:	0e c0       	rjmp	.+28     	; 0x1f04 <LCD_voidDisplayString+0x30>
		//while you don't reach to the end of your string enter the loop
		while(( Copy_u32StringDataPtr[count])!='\0')
		{
			//print the selected char
			LCD_voidDisplayChar(Copy_u32StringDataPtr[count]);
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	e2 0f       	add	r30, r18
    1ef6:	f3 1f       	adc	r31, r19
    1ef8:	80 81       	ld	r24, Z
    1efa:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidDisplayChar>
			//increment to print the next char
			count++;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	89 83       	std	Y+1, r24	; 0x01
  */
  void LCD_voidDisplayString(char  *Copy_u32StringDataPtr)
  {
	  u8 count=0;
		//while you don't reach to the end of your string enter the loop
		while(( Copy_u32StringDataPtr[count])!='\0')
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0e:	fc 01       	movw	r30, r24
    1f10:	e2 0f       	add	r30, r18
    1f12:	f3 1f       	adc	r31, r19
    1f14:	80 81       	ld	r24, Z
    1f16:	88 23       	and	r24, r24
    1f18:	39 f7       	brne	.-50     	; 0x1ee8 <LCD_voidDisplayString+0x14>
			//print the selected char
			LCD_voidDisplayChar(Copy_u32StringDataPtr[count]);
			//increment to print the next char
			count++;
		}
  }
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_voidShiftRight>:
  * Description : Shift all display right one step
  * Arguments   : void
  * return      : void
  */
  void LCD_voidShiftRight(void)
  {
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	  /*send shift right instruction*/
	  LCD_voidWriteCommand(LCD_DISP_SHIFT_RIGHT);
    1f2e:	8c e1       	ldi	r24, 0x1C	; 28
    1f30:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

  }/*end of LCD_voidShiftRight()*/
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <LCD_voidShiftLeft>:
  * Description : Shift all display left one step
  * Arguments   : void
  * return      : void
  */
  void LCD_voidShiftLeft(void)
  {
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	 /*send shift left instruction*/
	 LCD_voidWriteCommand(LCD_DISP_SHIFT_LEFT);
    1f42:	88 e1       	ldi	r24, 0x18	; 24
    1f44:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

  }/*end of LCD_voidShiftLeft()*/
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <LCD_voidCursorShiftRight>:
  * Description : shift cursor position number of steps right
  * Arguments   : Number of Steps
  * return      : void
  */
  void LCD_voidCursorShiftRight(u8 Copy_u8Steps)
  {
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <LCD_voidCursorShiftRight+0x6>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	8a 83       	std	Y+2, r24	; 0x02
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <LCD_voidCursorShiftRight+0x1c>
	  {
		  /*Shift cursor one step right instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_RIGHT);
    1f5e:	84 e1       	ldi	r24, 0x14	; 20
    1f60:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
  * return      : void
  */
  void LCD_voidCursorShiftRight(u8 Copy_u8Steps)
  {
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	99 81       	ldd	r25, Y+1	; 0x01
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	98 17       	cp	r25, r24
    1f70:	b0 f3       	brcs	.-20     	; 0x1f5e <LCD_voidCursorShiftRight+0x10>
		  /*Shift cursor one step right instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_RIGHT);

	  }/*end of steps for loop*/

  }/*end of LCD_voidCursorShiftRight()*/
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <LCD_voidCursorShiftLeft>:
  * Description : shift cursor position number of steps Left
  * Arguments   : Number of Steps
  * return      : void
  */
  void LCD_voidCursorShiftLeft(u8 Copy_u8Steps)
  {
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <LCD_voidCursorShiftLeft+0x6>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	8a 83       	std	Y+2, r24	; 0x02
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    1f88:	19 82       	std	Y+1, r1	; 0x01
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <LCD_voidCursorShiftLeft+0x1c>
	  {
		  /*Shift cursor one step Left instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_LEFT);
    1f8c:	80 e1       	ldi	r24, 0x10	; 16
    1f8e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
  * return      : void
  */
  void LCD_voidCursorShiftLeft(u8 Copy_u8Steps)
  {
	  /*loop steps*/
	  for(u8 i = 0 ; i < Copy_u8Steps ; i++)
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	99 81       	ldd	r25, Y+1	; 0x01
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	98 17       	cp	r25, r24
    1f9e:	b0 f3       	brcs	.-20     	; 0x1f8c <LCD_voidCursorShiftLeft+0x10>
		  /*Shift cursor one step Left instruction*/
		  LCD_voidWriteCommand(LCD_CURSOR_SHIFT_LEFT);

	  }/*end of steps for loop*/

  }/*end of LCD_voidCursorShiftLeft()*/
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <LCD_voidCursorDisplayOnOff>:
  * Description : set cursor display on and off
  * Arguments   : Status : LCD_ON or LCD_OFF
  * return      : void
  */
  void LCD_voidCursorDisplayOnOff(u8 Copy_u8Status)
  {
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Display status value (on or off)*/
	  SET_BIT_VALUE(DisplayAndCursorCommand,LCD_CURSOR_BIT,Copy_u8Status);
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	88 23       	and	r24, r24
    1fba:	31 f4       	brne	.+12     	; 0x1fc8 <LCD_voidCursorDisplayOnOff+0x1e>
    1fbc:	80 91 6f 00 	lds	r24, 0x006F
    1fc0:	8d 7f       	andi	r24, 0xFD	; 253
    1fc2:	80 93 6f 00 	sts	0x006F, r24
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <LCD_voidCursorDisplayOnOff+0x28>
    1fc8:	80 91 6f 00 	lds	r24, 0x006F
    1fcc:	82 60       	ori	r24, 0x02	; 2
    1fce:	80 93 6f 00 	sts	0x006F, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    1fd2:	80 91 6f 00 	lds	r24, 0x006F
    1fd6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

  }/*end of LCD_voidCursorDisplayOnOff()*/
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <LCD_voidCursorBlinkOnOff>:
  * Description : set cursor blinking on and off
  * Arguments   : Status : LCD_ON or LCD_OFF
  * return      : void
  */
  void LCD_voidCursorBlinkOnOff(u8 Copy_u8Status)
  {
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	0f 92       	push	r0
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Cursor status value (on or off)*/
	  SET_BIT_VALUE(DisplayAndCursorCommand,LCD_BLINK_BIT,Copy_u8Status);
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	88 23       	and	r24, r24
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <LCD_voidCursorBlinkOnOff+0x1e>
    1ff4:	80 91 6f 00 	lds	r24, 0x006F
    1ff8:	8e 7f       	andi	r24, 0xFE	; 254
    1ffa:	80 93 6f 00 	sts	0x006F, r24
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <LCD_voidCursorBlinkOnOff+0x28>
    2000:	80 91 6f 00 	lds	r24, 0x006F
    2004:	81 60       	ori	r24, 0x01	; 1
    2006:	80 93 6f 00 	sts	0x006F, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    200a:	80 91 6f 00 	lds	r24, 0x006F
    200e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>

  }/*end of LCD_voidCursorBlinkOnOff()*/
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <LCD_voidScreenDisplayOnOff>:
  * Description : set Whole display on & off
  * Arguments   : Status : LCD_ON or LCD_OFF
  * return      : void
  */
  void LCD_voidScreenDisplayOnOff(u8 Copy_u8Status)
  {
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01
	  /*Set Display status value (on or off)*/
	  SET_BIT_VALUE(DisplayAndCursorCommand,LCD_DISP_BIT,Copy_u8Status);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	88 23       	and	r24, r24
    202a:	31 f4       	brne	.+12     	; 0x2038 <LCD_voidScreenDisplayOnOff+0x1e>
    202c:	80 91 6f 00 	lds	r24, 0x006F
    2030:	8b 7f       	andi	r24, 0xFB	; 251
    2032:	80 93 6f 00 	sts	0x006F, r24
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <LCD_voidScreenDisplayOnOff+0x28>
    2038:	80 91 6f 00 	lds	r24, 0x006F
    203c:	84 60       	ori	r24, 0x04	; 4
    203e:	80 93 6f 00 	sts	0x006F, r24
	  /*Send command*/
	  LCD_voidWriteCommand(DisplayAndCursorCommand);
    2042:	80 91 6f 00 	lds	r24, 0x006F
    2046:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCD_voidWriteCommand>
	  
  }/*end of LCD_voidDisplayOnOff()*/
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <LCD_voidDisplayCustomChar>:
  * Description : use custom character from CGRAM
  * Arguments   : slot number : from (LCD_CUST_CHAR_1, LCD_CUST_CHAR_2,...LCD_CUST_CHAR_8)
  * return      : void  
  */
  void LCD_voidDisplayCustomChar(u8 Copy_SlotNumber)
  {
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	0f 92       	push	r0
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	89 83       	std	Y+1, r24	; 0x01
	  /*slot in range check*/
	  if ( (Copy_SlotNumber >= 0) && (Copy_SlotNumber<8) )
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	18 f4       	brcc	.+6      	; 0x206a <LCD_voidDisplayCustomChar+0x18>
	  {
		  /*Display Custom character in that slot*/
		  LCD_voidWriteData(Copy_SlotNumber);
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LCD_voidWriteData>
		
	  }/*end of slot number range check*/
	  
  }/*end of LCD_voidDisplayCustomChar()*/
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <KPAD_voidInitializeKeypad>:
#include "KPAD_Interface.h"
#include <avr/delay.h>


 void KPAD_voidInitializeKeypad(void)
 {
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	0f 92       	push	r0
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
    207c:	19 82       	std	Y+1, r1	; 0x01
    207e:	27 c0       	rjmp	.+78     	; 0x20ce <KPAD_voidInitializeKeypad+0x5c>
	 {
	 	 /*set column current bit in ColumnArray[] OUTPUT*/
		 DIO_VoidSetPinDirection(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_OUTPUT_PIN);
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	fc 01       	movw	r30, r24
    2088:	ef 58       	subi	r30, 0x8F	; 143
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	90 81       	ld	r25, Z
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	69 2f       	mov	r22, r25
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_VoidSetPinDirection>
	
		 /*set current bit in RowArray[] INPUT*/
		 DIO_VoidSetPinDirection(KEYPAD_PORT,KPAD_u8RowArray[i],DIO_INPUT_PIN);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	fc 01       	movw	r30, r24
    20a0:	eb 58       	subi	r30, 0x8B	; 139
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	90 81       	ld	r25, Z
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	69 2f       	mov	r22, r25
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_VoidSetPinDirection>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8RowArray[i],DIO_HIGH);
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	fc 01       	movw	r30, r24
    20b8:	eb 58       	subi	r30, 0x8B	; 139
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	90 81       	ld	r25, Z
    20be:	83 e0       	ldi	r24, 0x03	; 3
    20c0:	69 2f       	mov	r22, r25
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>

 void KPAD_voidInitializeKeypad(void)
 {
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	b0 f2       	brcs	.-84     	; 0x2080 <KPAD_voidInitializeKeypad+0xe>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8RowArray[i],DIO_HIGH);
	 }/*end of for loop*/
	
 }
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <KPAD_u8GetPressedKey>:

u8 KPAD_u8GetPressedKey(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <KPAD_u8GetPressedKey+0x6>
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <KPAD_u8GetPressedKey+0x8>
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62

    /*for loop to set all column pins HIGH*/
    for (u8 i = 0; i<4 ;i++ )
    20e8:	1b 82       	std	Y+3, r1	; 0x03
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <KPAD_u8GetPressedKey+0x2e>
    {
        /*set current pin in ColumnArray HIGH*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	fc 01       	movw	r30, r24
    20f4:	ef 58       	subi	r30, 0x8F	; 143
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	90 81       	ld	r25, Z
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	69 2f       	mov	r22, r25
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>

u8 KPAD_u8GetPressedKey(void)
{

    /*for loop to set all column pins HIGH*/
    for (u8 i = 0; i<4 ;i++ )
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	70 f3       	brcs	.-36     	; 0x20ec <KPAD_u8GetPressedKey+0x10>
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);

    }/*end of for loop*/

    /*for loop to scan all keypad columns*/
    for (u8 i = 0 ; i<4 ; i++)
    2110:	1a 82       	std	Y+2, r1	; 0x02
    2112:	43 c0       	rjmp	.+134    	; 0x219a <KPAD_u8GetPressedKey+0xbe>
    {
        /*set current column pin low to test all row pins to find out which button has been pressed*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_LOW);
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	fc 01       	movw	r30, r24
    211c:	ef 58       	subi	r30, 0x8F	; 143
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	90 81       	ld	r25, Z
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	69 2f       	mov	r22, r25
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>

        /*for loop to scan and test all keypad row pins*/
        for (u8 j = 0 ; j<4 ; j++)
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	23 c0       	rjmp	.+70     	; 0x2176 <KPAD_u8GetPressedKey+0x9a>
        {

            /*check current row pin value*/
            if ( DIO_LOW == DIO_U8GetPinValue(KEYPAD_PORT,KPAD_u8RowArray[j]) )
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	fc 01       	movw	r30, r24
    2138:	eb 58       	subi	r30, 0x8B	; 139
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	90 81       	ld	r25, Z
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	69 2f       	mov	r22, r25
    2142:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_U8GetPinValue>
    2146:	88 23       	and	r24, r24
    2148:	99 f4       	brne	.+38     	; 0x2170 <KPAD_u8GetPressedKey+0x94>
            {
                /*return pressed button value*/
                return KeyPadArr[j][i];
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	48 2f       	mov	r20, r24
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	ca 01       	movw	r24, r20
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	82 0f       	add	r24, r18
    2162:	93 1f       	adc	r25, r19
    2164:	fc 01       	movw	r30, r24
    2166:	e7 54       	subi	r30, 0x47	; 71
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	8c 83       	std	Y+4, r24	; 0x04
    216e:	1b c0       	rjmp	.+54     	; 0x21a6 <KPAD_u8GetPressedKey+0xca>
    {
        /*set current column pin low to test all row pins to find out which button has been pressed*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_LOW);

        /*for loop to scan and test all keypad row pins*/
        for (u8 j = 0 ; j<4 ; j++)
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	84 30       	cpi	r24, 0x04	; 4
    217a:	d0 f2       	brcs	.-76     	; 0x2130 <KPAD_u8GetPressedKey+0x54>
                return KeyPadArr[j][i];
            }
        }/*end of for loop*/

        /*set current column pin HIGH again*/
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	ef 58       	subi	r30, 0x8F	; 143
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	90 81       	ld	r25, Z
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	69 2f       	mov	r22, r25
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);

    }/*end of for loop*/

    /*for loop to scan all keypad columns*/
    for (u8 i = 0 ; i<4 ; i++)
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	8f 5f       	subi	r24, 0xFF	; 255
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	84 30       	cpi	r24, 0x04	; 4
    219e:	08 f4       	brcc	.+2      	; 0x21a2 <KPAD_u8GetPressedKey+0xc6>
    21a0:	b9 cf       	rjmp	.-142    	; 0x2114 <KPAD_u8GetPressedKey+0x38>
        DIO_VoidSetPinValue(KEYPAD_PORT,KPAD_u8ColumnArray[i],DIO_HIGH);

    }/*end of for loop*/

    /*Report no Button pressed*/
    return '?';
    21a2:	8f e3       	ldi	r24, 0x3F	; 63
    21a4:	8c 83       	std	Y+4, r24	; 0x04
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04

}/*end of HKPD_u8GetPressedKey()*/
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <H7SEG_VoidInit>:
#include "../../03_MCAL/DIO_Driver/DIO_Interface.h"
#include "H7SEG_Private.h"
#include "H7SEG_Interface.h"

void H7SEG_VoidInit(u8 Copy_U8Port)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01

    DIO_VoidSetPortDirection(Copy_U8Port,DIO_OUTPUT_PORT);
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	6f ef       	ldi	r22, 0xFF	; 255
    21c6:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_VoidSetPortDirection>
}
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <H7SEG_VoidDisplayNumber>:

void H7SEG_VoidDisplayNumber(u8 Copy_U8Port,u8 Copy_u8DisplayNumber)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <H7SEG_VoidDisplayNumber+0x6>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	6a 83       	std	Y+2, r22	; 0x02

    DIO_VoidSetPortValue(Copy_U8Port,H7SEG_u8SevenSegArray[Copy_u8DisplayNumber]);
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	fc 01       	movw	r30, r24
    21e8:	e7 53       	subi	r30, 0x37	; 55
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	90 81       	ld	r25, Z
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	69 2f       	mov	r22, r25
    21f2:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_VoidSetPortValue>

}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <main>:
#include "../03_MCAL/EXTI_Driver/EXTI_Interface.h"
#include "../03_MCAL/UART_Driver/UART_Interface.h"
#include <avr/delay.h>

int main(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62

	PORT_VoidInit();
    2208:	0e 94 7f 06 	call	0xcfe	; 0xcfe <PORT_VoidInit>
	LCD_voidInitializeLCD();
    220c:	0e 94 16 0c 	call	0x182c	; 0x182c <LCD_voidInitializeLCD>
    UART_voidInitUART();
    2210:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInitUART>

    DIO_VoidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_HIGH);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	62 e0       	ldi	r22, 0x02	; 2
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_VoidSetPinValue>

    LCD_voidDisplayChar('a');
    221e:	81 e6       	ldi	r24, 0x61	; 97
    2220:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidDisplayChar>
    LCD_voidDisplayString("Hassan");
    2224:	80 e6       	ldi	r24, 0x60	; 96
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidDisplayString>
    222c:	ff cf       	rjmp	.-2      	; 0x222c <main+0x2c>

0000222e <__prologue_saves__>:
    222e:	2f 92       	push	r2
    2230:	3f 92       	push	r3
    2232:	4f 92       	push	r4
    2234:	5f 92       	push	r5
    2236:	6f 92       	push	r6
    2238:	7f 92       	push	r7
    223a:	8f 92       	push	r8
    223c:	9f 92       	push	r9
    223e:	af 92       	push	r10
    2240:	bf 92       	push	r11
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	ca 1b       	sub	r28, r26
    2258:	db 0b       	sbc	r29, r27
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	09 94       	ijmp

00002266 <__epilogue_restores__>:
    2266:	2a 88       	ldd	r2, Y+18	; 0x12
    2268:	39 88       	ldd	r3, Y+17	; 0x11
    226a:	48 88       	ldd	r4, Y+16	; 0x10
    226c:	5f 84       	ldd	r5, Y+15	; 0x0f
    226e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2270:	7d 84       	ldd	r7, Y+13	; 0x0d
    2272:	8c 84       	ldd	r8, Y+12	; 0x0c
    2274:	9b 84       	ldd	r9, Y+11	; 0x0b
    2276:	aa 84       	ldd	r10, Y+10	; 0x0a
    2278:	b9 84       	ldd	r11, Y+9	; 0x09
    227a:	c8 84       	ldd	r12, Y+8	; 0x08
    227c:	df 80       	ldd	r13, Y+7	; 0x07
    227e:	ee 80       	ldd	r14, Y+6	; 0x06
    2280:	fd 80       	ldd	r15, Y+5	; 0x05
    2282:	0c 81       	ldd	r16, Y+4	; 0x04
    2284:	1b 81       	ldd	r17, Y+3	; 0x03
    2286:	aa 81       	ldd	r26, Y+2	; 0x02
    2288:	b9 81       	ldd	r27, Y+1	; 0x01
    228a:	ce 0f       	add	r28, r30
    228c:	d1 1d       	adc	r29, r1
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	ed 01       	movw	r28, r26
    229a:	08 95       	ret

0000229c <_exit>:
    229c:	f8 94       	cli

0000229e <__stop_program>:
    229e:	ff cf       	rjmp	.-2      	; 0x229e <__stop_program>
